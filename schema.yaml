openapi: 3.0.0
info:
  title: Entando Core APIs
  description: Entando Core APIs
  termsOfService: 'https://'
  contact:
    name: Walter Caffiero
    url: 'https://'
    email: w.caffiero@entando.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 7.0.0
servers:
  - url: /entando-de-app/api
    description: Entando 7.0 API base path
paths:
  /activityStream:
    summary: Activity stream operations
    description: End-point to access and manipulate the activity stream
    get:
      tags:
        - activity-stream-controller
      summary: Retrieve the activity stream
      description: Retrieve the activity stream's records filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getActivityStream
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/activityStream'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/activityStream/{recordId}/comments':
    summary: Activity stream record's comments collection operations
    description: End-point to access and manipulate the activity stream record's comments collection
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
    post:
      tags:
        - activity-stream-controller
      summary: Add a comment to an activity stream record
      description: Add the comment to the activity stream record specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addComment
      requestBody:
        $ref: '#/components/requestBodies/activityStreamRecordComment'
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/activityStream/{recordId}/comments/{commentId}':
    summary: Activity stream record's comment operations
    description: End-point to access and manipulate an activity stream record's comment
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
      - $ref: '#/components/parameters/activityStreamRecordCommentId'
    delete:
      tags:
        - activity-stream-controller
      summary: Remove a comment from the activity stream record
      description: Remove the comment from the activity stream record as specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: removeComment
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/activityStream/{recordId}/like':
    summary: Activity stream record's likes collection operations
    description: End-point to access and manipulate the activity stream record's likes collection
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
    post:
      tags:
        - activity-stream-controller
      summary: Add a like to an activity stream record
      description: Add a like to the activity stream record specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addLike
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - activity-stream-controller
      summary: Remove a like from an activity stream record
      description: Remove a like from the activity stream record specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: removeLike
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /analysis/cms/components/diff:
    summary: CMS components analysis operations
    description: API to perform analysis on CMS components
    post:
      tags:
        - analysis-controller-cms
      summary: Run the CMS component existence analysis
      description: Perform the analysis on the existnce of the CMS components
      externalDocs:
        description: ''
        url: 'https://'
      operationId: runCMSComponentExistenceAnalysis
      requestBody:
        $ref: '#/components/requestBodies/idCodesByObjectType'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /analysis/components/diff:
    summary: Components analysis operations
    description: API to perform analysis on components
    post:
      tags:
        - analysis-controller
      summary: Run the component existence analysis
      description: Perform the analysis on the existnce of the components
      externalDocs:
        description: ''
        url: 'https://'
      operationId: runComponentExistenceAnalysis
      requestBody:
        $ref: '#/components/requestBodies/idCodesByObjectType'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /categories:
    summary: Categories operations
    description: API to access and manipulate the collection of categories
    get:
      tags:
        - category-controller
      summary: Retrieve the collection of categories
      description: Retrieve the collection of categories filtered by parent code
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategories
      parameters:
        - $ref: '#/components/parameters/categoriesParentCode'
      responses:
        '200':
          $ref: '#/components/responses/categoriesListMapMetadata'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - category-controller
      summary: Add a category to the categories collection
      description: Create a new category as specified in the request body and add it to the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addCategory
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/category'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/categories/{categoryId}':
    summary: Category operations
    description: API to access and manipulate a category
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      tags:
        - category-controller
      summary: Retrieve a category
      description: Retrieve the category specified in the path from the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategory
      responses:
        '200':
          $ref: '#/components/responses/category'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - category-controller
      summary: Update a category
      description: Update the category specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateCategory
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/categoryMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - category-controller
      summary: Delete a category
      description: Delete the category specified in the path from the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteCategory
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/categories/{categoryId}/references/{categoryReferenceHolder}':
    summary: Category references operations
    description: API to access and manipulate the category references
    parameters:
      - $ref: '#/components/parameters/categoryId'
      - $ref: '#/components/parameters/categoryReferenceHolder'
    get:
      tags:
        - category-controller
      summary: Retrieve the category references
      description: Retrieve the category references for the category specified in the path by holder
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategoryReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pagedRestResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/categories/{categoryId}/usage':
    summary: Category usage operations
    description: API to access and manipulate a category usage
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      tags:
        - category-controller
      summary: Retrieve the category usage
      description: Retrieve the usage of the category specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategoryUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /consumers:
    summary: Consumers operations
    description: API to access and manipulate the collection of consumers
    get:
      tags:
        - consumers
      summary: Retrieve the collection of consumers
      description: Retrieve the collection of consumers filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getConsumers
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/consumerObject'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - consumers
      summary: Add a consumer to the consumers collection
      description: Create a new consumer as specified in the request body and add it to the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createConsumer
      requestBody:
        $ref: '#/components/requestBodies/consumer'
      responses:
        '200':
          $ref: '#/components/responses/consumerObject'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/consumers/{consumerId}':
    summary: Consumer operations
    description: API to access and manipulate a consumer
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      tags:
        - consumers
      summary: Retrieve a consumer
      description: Retrieve the consumer specified in the path from the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getConsumer
      responses:
        '200':
          $ref: '#/components/responses/consumer'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - consumers
      summary: Update a consumer
      description: Update the consumer specified in the path as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateConsumer
      requestBody:
        $ref: '#/components/requestBodies/consumer'
      responses:
        '200':
          $ref: '#/components/responses/consumer'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - consumers
      summary: Delete a consumer
      description: Delete the consumer specified in the path from the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteConsumer
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /dashboard/integration:
    summary: Dashboard integration operations
    description: API to access the dashboard integration
    get:
      tags:
        - dashboard-controller
      summary: Retrieve the dashboard integration info
      description: Retrieve the dashboard integration info
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getDashboardIntegration
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /dashboard/pageStatus:
    summary: Dashboard page status operations
    description: API to access the dashboard page status
    get:
      tags:
        - dashboard-controller
      summary: Retrieve the dashboard page status
      description: Retrieve the dashboard page status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getDashboardPageStatus
      responses:
        '200':
          $ref: '#/components/responses/pageStatus'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /database:
    summary: Database operations
    description: API to access and manipulate the database
    get:
      tags:
        - database-controller
      summary: Retrieve the database dump reports
      description: Retrieve the database dump reports
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getDumpReports
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/shortDumpReports'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /database/initBackup:
    summary: Database backup operations
    description: API to access and manipulate the database backup
    get:
      tags:
        - database-controller
      summary: Initiate a backup
      description: Initiate a backup
      externalDocs:
        description: ''
        url: 'https://'
      operationId: initBackup
      responses:
        '200':
          $ref: '#/components/responses/componentsList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/database/report/{reportId}':
    summary: Database report operations
    description: API to access and manipulate a database report
    parameters:
      - $ref: '#/components/parameters/reportId'
    get:
      tags:
        - database-controller
      summary: Retrieve a database dump report
      description: Retrieve the database dump report specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getDumpReport
      responses:
        '200':
          $ref: '#/components/responses/dumpReport'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - database-controller
      summary: Delete a database dump report
      description: Delete the database dump report specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteDumpReport
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/database/report/{reportId}/dump/{dataSource}/{tableName}':
    summary: Database report data table operations
    description: API to access and manipulate a database report data table
    parameters:
      - $ref: '#/components/parameters/reportId'
      - $ref: '#/components/parameters/dataSource'
      - $ref: '#/components/parameters/tableName'
    get:
      tags:
        - database-controller
      summary: Retrieve a database table dump
      description: Retrieve the database table dump specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getTableDump
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapMetadata'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/database/restoreBackup/{reportId}':
    summary: Database restore backup operations
    description: API to perform a backup restore
    parameters:
      - $ref: '#/components/parameters/reportId'
    put:
      tags:
        - database-controller
      summary: Restore a database backup
      description: Restore the database backup specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: restoreBackup
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /database/startBackup:
    summary: Database backup operations
    description: API to access and manipulate the database backup
    post:
      tags:
        - database-controller
      summary: Start a backup
      description: Start a backup
      externalDocs:
        description: ''
        url: 'https://'
      operationId: startBackup
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /database/status:
    summary: Database status operations
    description: API to access and manipulate the database status
    get:
      tags:
        - database-controller
      summary: Retrieve the database status
      description: Retrieve the database status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getDatabaseStatus
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /entityManagers:
    summary: Entity managers operations
    description: API to access and manipulate the entity managers
    get:
      tags:
        - entity-manager-controller
      summary: Retrieve the entity managers
      description: Retrieve the entity managers filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getEntityManagers
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/strings'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/entityManagers/{entityManagerId}':
    summary: Entity managers operations
    description: API to access and manipulate the entity managers
    parameters:
      - $ref: '#/components/parameters/entityManagerId'
    get:
      tags:
        - entity-manager-controller
      summary: Retrieve an entity manager
      description: Retrieve the entity manager specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getEntityManager
      responses:
        '200':
          $ref: '#/components/responses/entityManager'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /fileBrowser:
    summary: File browser operations
    description: API to access and manipulate the file browser
    get:
      tags:
        - file-browser-controller
      summary: Retrieve the content of a folder
      description: Retrieve the content of the folder specified in the query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: browseFolder
      parameters:
        - $ref: '#/components/parameters/currentPath'
        - $ref: '#/components/parameters/protectedFolder'
      responses:
        '200':
          $ref: '#/components/responses/basicFileAttributeViewList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /fileBrowser/directory:
    summary: File browser directories operations
    description: API to access and manipulate the file browser directories
    post:
      tags:
        - file-browser-controller
      summary: Add a directory to the file browser
      description: Create a new directory as specified in the request body and add it to the file browser
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addDirectory
      requestBody:
        $ref: '#/components/requestBodies/directory'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - file-browser-controller
      summary: Delete a directory from the file browser
      description: Delete the directory specified in the query parameters from the file browser
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteDirectory
      parameters:
        - $ref: '#/components/parameters/currentPath'
        - $ref: '#/components/parameters/protectedFolder'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /fileBrowser/file:
    summary: File browser files operations
    description: API to access and manipulate the file browser files
    get:
      tags:
        - file-browser-controller
      summary: Retrieve a file
      description: Retrieve the file specified in the query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/currentPath'
        - $ref: '#/components/parameters/protectedFolder'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - file-browser-controller
      summary: Update a file
      description: Update the file as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateFile
      requestBody:
        $ref: '#/components/requestBodies/file'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - file-browser-controller
      summary: Add a file
      description: Create a new file as specified in the request body and add it to the file browser
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addFile
      requestBody:
        $ref: '#/components/requestBodies/file'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - file-browser-controller
      summary: Delete a file from the file browser
      description: Delete the file specified in the query parameters from the file browser
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteFile
      parameters:
        - $ref: '#/components/parameters/currentPath'
        - $ref: '#/components/parameters/protectedFolder'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /fragments:
    summary: Fragments operations
    description: API to access and manipulate fragments
    get:
      tags:
        - gui-fragment-controller
      summary: Retrieve the collection of GUI fragments
      description: Retrieve the collection of GUI fragments filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFragments
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/fragmentsSmall'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - gui-fragment-controller
      summary: Add a fragment to the fragments collection
      description: Create a new fragment as specified in the request body and add it to the fragments collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addFragment
      requestBody:
        $ref: '#/components/requestBodies/fragment'
      responses:
        '200':
          $ref: '#/components/responses/fragment'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /fragments/info/plugins:
    summary: Fragments info plugins operations
    description: API to access and manipulate fragments info plugins
    get:
      tags:
        - gui-fragment-controller
      summary: Retrieve the collection of plugin codes
      description: Retrieve the collection of plugin codes
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPluginCodes
      responses:
        '200':
          $ref: '#/components/responses/stringsList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/fragments/{fragmentId}':
    summary: Fragment operations
    description: API to access and manipulate a fragment
    parameters:
      - $ref: '#/components/parameters/fragmentId'
    get:
      tags:
        - gui-fragment-controller
      summary: Retrieve a GUI fragment
      description: Retrieve the fragment specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFragment
      responses:
        '200':
          $ref: '#/components/responses/fragment'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - gui-fragment-controller
      summary: Update a GUI fragment
      description: Update the fragment specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateFragment
      requestBody:
        $ref: '#/components/requestBodies/fragmentGUICode'
      responses:
        '200':
          $ref: '#/components/responses/fragment'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - gui-fragment-controller
      summary: Delete a GUI fragment
      description: Delete the fragment specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteFragment
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/fragments/{fragmentId}/usage':
    summary: GUI fragment usage operations
    description: API to access and manipulate a GUI fragment usage
    parameters:
      - $ref: '#/components/parameters/fragmentId'
    get:
      tags:
        - gui-fragment-controller
      summary: Retrieve the fragment usage
      description: Retrieve the usage of the fragment specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFragmentUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/fragments/{fragmentId}/usage/details':
    summary: GUI fragment usage details operations
    description: API to access and manipulate a GUI fragment usage details
    parameters:
      - $ref: '#/components/parameters/fragmentId'
    get:
      tags:
        - gui-fragment-controller
      summary: Retrieve a fragment usage details
      description: Retrieve the usage details for the fragment specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFragmentUsageDetails
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/pageCodeToken'
        - $ref: '#/components/parameters/title'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageEntities'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /fragmentsSettings:
    summary: Fragments settings operations
    description: API to access and manipulate fragments settings
    get:
      tags:
        - gui-fragment-settings-controller
      summary: Retrieve the fragments settings
      description: Retrieve the fragments settings
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getFragmentsSettings
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - gui-fragment-settings-controller
      summary: Update the fragments settings
      description: Update the fragments settings
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateFragmentsSettings
      responses:
        '200':
          $ref: '#/components/responses/booleanMap'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /groups:
    summary: Groups operations
    description: API to access and manipulate groups
    get:
      tags:
        - group-controller
      summary: Retrieve the collection of groups
      description: Retrieve the collection of groups filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getGroups
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/groups'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - group-controller
      summary: Add a group to the groups collection
      description: Create a new group as specified in the request body and add it to the groups collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addGroup
      requestBody:
        $ref: '#/components/requestBodies/group'
      responses:
        '200':
          $ref: '#/components/responses/group'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/groups/{groupId}':
    summary: Group operations
    description: API to access and manipulate a group
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      tags:
        - group-controller
      summary: Retrieve a group
      description: Retrieve the group specified in the path from the groups collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getGroup
      responses:
        '200':
          $ref: '#/components/responses/group'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - group-controller
      summary: Update a group
      description: Update the group specified in the path as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateGroup
      requestBody:
        $ref: '#/components/requestBodies/group'
      responses:
        '200':
          $ref: '#/components/responses/group'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/groups/{groupId}/references/{groupReferenceHolder}':
    summary: Group references operations
    description: API to access and manipulate the group references
    parameters:
      - $ref: '#/components/parameters/groupId'
      - $ref: '#/components/parameters/groupReferenceHolder'
    get:
      tags:
        - group-controller
      summary: Retrieve the group references
      description: Retrieve the group references for the group specified in the path by holder filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getGroupReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pagedRestResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/groups/{groupId}/usage':
    summary: Group usage operations
    description: API to access and manipulate a group usage
    parameters:
      - $ref: '#/components/parameters/groupId'
    get:
      tags:
        - group-controller
      summary: Retrieve the group usage
      description: Retrieve the usage of the group specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getGroupUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/groups/{groupName}':
    summary: Group operations
    description: API to access and manipulate a group
    parameters:
      - $ref: '#/components/parameters/groupName'
    delete:
      tags:
        - group-controller
      summary: Delete a group
      description: Delete the group specified in the path from the groups collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteGroup
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /health:
    summary: Health operations
    description: API to access and manipulate health
    get:
      tags:
        - health-controller
      summary: Retrieve the health
      description: Retrieve the health
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getHealth
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /labels:
    summary: Labels operations
    description: API to access and manipulate labels
    get:
      tags:
        - label-controller
      summary: Retrieve the collection of labels
      description: Retrieve the collection of labels filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getLabels
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/labels'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - label-controller
      summary: Add a label to the labels collection
      description: Create a new label as specified in the request body and add it to the labels collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addLabel
      requestBody:
        $ref: '#/components/requestBodies/label'
      responses:
        '200':
          $ref: '#/components/responses/label'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/labels/{labelId}':
    summary: Label operations
    description: API to access and manipulate a label
    parameters:
      - $ref: '#/components/parameters/labelId'
    get:
      tags:
        - label-controller
      summary: Retrieve a label
      description: Retrieve the label specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getLabel
      responses:
        '200':
          $ref: '#/components/responses/label'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - label-controller
      summary: Update a label
      description: Update the label specified in the path as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateLabel
      requestBody:
        $ref: '#/components/requestBodies/label'
      responses:
        '200':
          $ref: '#/components/responses/label'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - label-controller
      summary: Delete a label
      description: Delete the label specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteLabel
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /languages:
    summary: Languages operations
    description: API to access and manipulate languages
    get:
      tags:
        - language-controller
      summary: Retrieve the collection of languages
      description: Retrieve the collection of languages filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getLanguages
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/languages'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/languages/{languageId}':
    summary: Language operations
    description: API to access and manipulate a language
    parameters:
      - $ref: '#/components/parameters/languageId'
    get:
      tags:
        - language-controller
      summary: Retrieve a language
      description: Retrieve the language specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getLanguage
      responses:
        '200':
          $ref: '#/components/responses/language'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - language-controller
      summary: Update a language
      description: Update the language specified in the path as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateLanguage
      requestBody:
        $ref: '#/components/requestBodies/label'
      responses:
        '200':
          $ref: '#/components/responses/language'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /myProfileType:
    summary: My profile type operations
    description: API to access and manipulate my profile type
    get:
      tags:
        - profile-type-controller
      summary: Retrieve my profile type
      description: Retrieve the my profile type filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getMyProfileType
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/userProfileType'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /myUserProfile:
    summary: My user profile operations
    description: API to access and manipulate my user profile
    get:
      tags:
        - profile-controller
      summary: Retrieve the my user profile
      description: Retrieve the my user profile filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getMyUserProfile
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/entity'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - profile-controller
      summary: Update the my user profile
      description: Update the my user profile filtered by query parameters as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateMyUserProfile
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/entity'
      responses:
        '200':
          $ref: '#/components/responses/entity'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /oauth/authorize:
    summary: Authorization operations
    description: API to handle authorizations
    get:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via GET
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeGET
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via PUT
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePUT
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via POST
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePOST
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via DELETE
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeDELETE
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    options:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via OPTIONS
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeOPTIONS
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    head:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via HEAD
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeHEAD
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    patch:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via PATCH
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePATCH
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /oauth/check_token:
    summary: Check token operations
    description: API to handle token checks
    post:
      tags:
        - check-token-endpoint
      summary: Check token
      description: Check token via POST
      externalDocs:
        description: ''
        url: 'https://'
      operationId: checkToken
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          $ref: '#/components/responses/objectObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /pages:
    summary: Pages operations
    description: API to access and manipulate pages
    get:
      tags:
        - page-controller
      summary: Retrieve the collection of pages
      description: Retrieve the collection of pages filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPages
      parameters:
        - $ref: '#/components/parameters/pagesParentCode'
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
        - $ref: '#/components/parameters/forLinkingToExtraGroups'
        - $ref: '#/components/parameters/forLinkingToOwnerGroup'
      responses:
        '200':
          $ref: '#/components/responses/pagesListMapMetadata'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - page-controller
      summary: Add a page to the pages collection
      description: Create a new page as specified in the request body and add it to the pages collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addPage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/page'
      responses:
        '200':
          $ref: '#/components/responses/page'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /pages/search:
    summary: Pages search operations
    description: API to access and manipulate pages search
    get:
      tags:
        - page-controller
      summary: Search the collection of pages
      description: Search the collection of pages by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: searchPages
      parameters:
        - $ref: '#/components/parameters/pageCodeToken'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pages'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /pages/search/group/free:
    summary: Free pages search operations
    description: API to access and manipulate free pages search
    get:
      tags:
        - page-controller
      summary: Search the collection of free pages
      description: Search the collection of free pages by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: searchFreePages
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pages'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /pages/viewpages:
    summary: Pages view operations
    description: API to access and manipulate pages view
    get:
      tags:
        - page-controller
      summary: Retrieve the collection of pages view
      description: Retrieve the collection of pages view
      externalDocs:
        description: ''
        url: 'https://'
      operationId: viewPages
      responses:
        '200':
          $ref: '#/components/responses/pagesList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}':
    summary: Page operations
    description: API to access and manipulate page
    parameters:
      - $ref: '#/components/parameters/pageId'
    get:
      tags:
        - page-controller
      summary: Retrieve a page
      description: Retrieve the page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPage
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - page-controller
      summary: Update a page
      description: Update the page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/page'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - page-controller
      summary: Delete a page
      description: Delete the page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deletePage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    patch:
      tags:
        - page-controller
      summary: Patch a page
      description: Patch the page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: patchPage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/jsonNode'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/pages/{pageId}/clone':
    summary: Page clone operations
    description: API to access and manipulate page clone
    parameters:
      - $ref: '#/components/parameters/pageId'
    post:
      tags:
        - page-controller
      summary: Clone a page
      description: Clone the page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: clonePage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/pageClone'
      responses:
        '200':
          $ref: '#/components/responses/page'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/configuration':
    summary: Page configuration operations
    description: API to access and manipulate page configuration
    parameters:
      - $ref: '#/components/parameters/pageId'
    get:
      tags:
        - page-configuration-controller
      summary: Retrieve a page configuration
      description: Retrieve the configuration of the page specified in the path filtered by status query parameter
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageConfiguration
      parameters:
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/pageConfiguration'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/configuration/defaultWidgets':
    summary: Page default widgets configuration operations
    description: API to access and manipulate page default widgets configuration
    parameters:
      - $ref: '#/components/parameters/pageId'
    put:
      tags:
        - page-configuration-controller
      summary: Apply a page default widget configuration
      description: Apply the default widgets configuration to the page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: applyDefaultWidgetsPageConfiguration
      responses:
        '200':
          $ref: '#/components/responses/pageConfiguration'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/configuration/restore':
    summary: Page configuration restore operations
    description: API to access and manipulate page configuration restore
    parameters:
      - $ref: '#/components/parameters/pageId'
    put:
      tags:
        - page-configuration-controller
      summary: Update a page configuration
      description: Update the configuration of the page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePageConfiguration
      responses:
        '200':
          $ref: '#/components/responses/pageConfiguration'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/position':
    summary: Page position operations
    description: API to access and manipulate page position
    parameters:
      - $ref: '#/components/parameters/pageId'
    put:
      tags:
        - page-controller
      summary: Move a page
      description: Move the page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: movePage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/pagePosition'
      responses:
        '200':
          $ref: '#/components/responses/page'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/references/{pageReferencesManager}':
    summary: Page references manager operations
    description: API to access and manipulate page references manager
    parameters:
      - $ref: '#/components/parameters/pageId'
      - $ref: '#/components/parameters/pageReferencesManager'
    get:
      tags:
        - page-controller
      summary: Get a page references
      description: Get the page references manager specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pagedRestResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/status':
    summary: Page status operations
    description: API to access and manipulate page status
    parameters:
      - $ref: '#/components/parameters/pageId'
    put:
      tags:
        - page-controller
      summary: Update a page status
      description: Update the status of the page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePageStatus
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/pageStatus'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/usage':
    summary: Page usage operations
    description: API to access and manipulate page usage
    parameters:
      - $ref: '#/components/parameters/pageId'
    get:
      tags:
        - page-controller
      summary: Retrieve a page usage
      description: Retrieve the usage count for the page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/usage/details':
    summary: Page usage details operations
    description: API to access and manipulate page usage details
    parameters:
      - $ref: '#/components/parameters/pageId'
    get:
      tags:
        - page-controller
      summary: Retrieve a page usage details
      description: Retrieve the usage details for the page specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageUsageDetails
      parameters:
        - $ref: '#/components/parameters/pageCodeToken'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageEntities'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/widgets':
    summary: Page widgets operations
    description: API to access and manipulate page widgets
    parameters:
      - $ref: '#/components/parameters/pageId'
    get:
      tags:
        - page-configuration-controller
      summary: Retrieve a page widgets
      description: Retrieve the widgets of the page specified in the path filtered by status query parameter
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageWidgets
      parameters:
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/widgetConfigurationList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pages/{pageId}/widgets/{frameId}':
    summary: Page frame widget operations
    description: API to access and manipulate page frame widget
    parameters:
      - $ref: '#/components/parameters/pageId'
      - $ref: '#/components/parameters/frameId'
    get:
      tags:
        - page-configuration-controller
      summary: Get a page widget
      description: Get the page widget specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageWidget
      parameters:
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/widgetConfiguration'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - page-configuration-controller
      summary: Update a page widget
      description: Update the page widget specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePageWidget
      requestBody:
        $ref: '#/components/requestBodies/widgetConfiguration'
      responses:
        '200':
          $ref: '#/components/responses/widgetConfiguration'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - page-configuration-controller
      summary: Delete a page widget
      description: Delete the page widget specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deletePageWidget
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /pageModels:
    summary: Page models operations
    description: API to access and manipulate page models
    get:
      tags:
        - page-models
      summary: Retrieve the collection of page models
      description: Retrieve the collection of page models filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageModels
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/requestParams'
      responses:
        '200':
          $ref: '#/components/responses/pageModels'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - page-models
      summary: Add a page model
      description: Create a new page model as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addPageModel
      requestBody:
        $ref: '#/components/requestBodies/pageModel'
      responses:
        '200':
          $ref: '#/components/responses/pageModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
  '/pageModels/{pageModelId}':
    summary: Page model operations
    description: API to access and manipulate a page model
    parameters:
      - $ref: '#/components/parameters/pageModelId'
    get:
      tags:
        - page-models
      summary: Retrieve a page model
      description: Retrieve the page model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageModel
      responses:
        '200':
          $ref: '#/components/responses/pageModel'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - page-models
      summary: Update a page model
      description: Update the page model specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePageModel
      requestBody:
        $ref: '#/components/requestBodies/pageModel'
      responses:
        '200':
          $ref: '#/components/responses/pageModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - page-models
      summary: Delete a page model
      description: Delete the page model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deletePageModel
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/pageModels/{pageModelId}/references/{pageModelReferencesManager}':
    summary: Page model references manager operations
    description: API to access and manipulate page model references manager
    parameters:
      - $ref: '#/components/parameters/pageModelId'
      - $ref: '#/components/parameters/pageModelReferencesManager'
    get:
      tags:
        - page-models
      summary: Get a page model references
      description: Get the page model references manager specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageModelReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pagedRestResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pageModels/{pageModelId}/usage':
    summary: Page model usage operations
    description: API to access and manipulate page model usage
    parameters:
      - $ref: '#/components/parameters/pageModelId'
    get:
      tags:
        - page-models
      summary: Retrieve a page model usage
      description: Retrieve the usage count for the page model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageModelUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/pageModels/{pageModelId}/usage/details':
    summary: Page model usage details operations
    description: API to access and manipulate page model usage details
    parameters:
      - $ref: '#/components/parameters/pageModelId'
    get:
      tags:
        - page-models
      summary: Retrieve a page model usage details
      description: Retrieve the usage details for the page model specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageModelUsageDetails
      parameters:
        - $ref: '#/components/parameters/pageCodeToken'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageEntities'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /pageSettings:
    summary: Page settings operations
    description: API to access and manipulate page settings
    get:
      tags:
        - page-settings-controller
      summary: Retrieve the page settings
      description: Retrieve the page settings
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPageSettings
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - page-settings-controller
      summary: Update the page settings
      description: Update the page settings as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updatePageSettings
      requestBody:
        $ref: '#/components/requestBodies/jsonMap'
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /permissions:
    summary: Permissions operations
    description: API to access and manipulate permissions
    get:
      tags:
        - permission-controller
      summary: Retrieve the collection of permissions
      description: Retrieve the collection of permissions filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getPermissions
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/permissions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/assets:
    summary: Assets operations
    description: API to access and manipulate the collection of assets
    get:
      tags:
        - resources-controller
      summary: Retrieve the collection of assets
      description: Retrieve the collection of assets filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getAssets
      parameters:
        - $ref: '#/components/parameters/assetType'
        - $ref: '#/components/parameters/forLinkingWithExtraGroups'
        - $ref: '#/components/parameters/forLinkingWithOwnerGroup'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/assets_generic'
        '201':
          $ref: '#/components/responses/assets_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - resources-controller
      summary: Add an asset
      description: Create a new asset as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addAsset
      parameters:
        - $ref: '#/components/parameters/assetMetadata'
      requestBody:
        $ref: '#/components/requestBodies/asset'
      responses:
        '200':
          $ref: '#/components/responses/asset_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/assets/folder:
    summary: Assets folder operations
    description: API to access and manipulate assets folder
    get:
      tags:
        - resources-controller
      summary: Retrieve assets folder
      description: Retrieve assets folder filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getAssetsFolder
      parameters:
        - $ref: '#/components/parameters/assetsFolderPath'
      responses:
        '200':
          $ref: '#/components/responses/assetsList_generic'
        '201':
          $ref: '#/components/responses/assetsList_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/assets/{resourceId}':
    summary: Asset operations
    description: API to access and manipulate an asset
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      tags:
        - resources-controller
      summary: Update an asset
      description: Update the asset specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateAsset
      requestBody:
        $ref: '#/components/requestBodies/assetWithMetadata'
      responses:
        '200':
          $ref: '#/components/responses/asset_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - resources-controller
      summary: Delete an asset
      description: Delete the asset specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteAsset
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/assets/{resourceId}/clone':
    summary: Asset clone operations
    description: API to access and manipulate an asset clone
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      tags:
        - resources-controller
      summary: Clone an asset
      description: Clone the asset specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: cloneAsset
      responses:
        '200':
          $ref: '#/components/responses/asset_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentmodels:
    summary: Content Models operations
    description: API to access and manipulate the collection of content models
    get:
      tags:
        - content-model-controller
      summary: Retrieve the collection of content models
      description: Retrieve the collection of content models filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModels
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentModels'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    post:
      tags:
        - content-model-controller
      summary: Add a content model to the content models collection
      description: Create a new content model as specified in the request body and add it to the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addContentModel
      requestBody:
        $ref: '#/components/requestBodies/contentModel'
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/cms/contentmodels/dictionary:
    summary: Content models dictionary operations
    description: API to access and manipulate the dictionary of content models
    get:
      tags:
        - content-model-controller
      summary: Retrieve the dictionary of content models
      description: Retrieve the dictionary of content models containing *velocity* instructions for the editor
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelsDictionary
      parameters:
        - $ref: '#/components/parameters/typeCode'
      responses:
        '200':
          $ref: '#/components/responses/iEntityModelDictionary'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}':
    summary: Content model operations
    description: API to access and manipulate a content model
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model
      description: Retrieve the content model specified in the path from the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModel
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    put:
      tags:
        - content-model-controller
      summary: Update a content model
      description: Update the content model specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentModel
      requestBody:
        $ref: '#/components/requestBodies/contentModel'
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    delete:
      tags:
        - content-model-controller
      summary: Delete a content model
      description: Delete the content model specified in the path from the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContentModel
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/pagereferences':
    summary: Content model references operations
    description: API to access and manipulate a content model references
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model references
      description: Retrieve the page (and widget) references for the content model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentModelReferences'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/usage':
    summary: Content model usage operations
    description: API to access and manipulate a content model usage
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model usage
      description: Retrieve the usage count for the content model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/usage/details':
    summary: Content model usage details operations
    description: API to access and manipulate a content model usage details
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model usage details
      description: Retrieve the usage details for the content model specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelUsageDetails
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageEntities'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/cms/contentSettings:
    summary: Content settings operations
    description: API to access and manipulate the collection of content settings
    get:
      tags:
        - content-settings-controller
      summary: Retrieve the collection of content settings
      description: Retrieve the collection of content settings
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentSettings
      responses:
        '200':
          $ref: '#/components/responses/contentSetting_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/cropRatios:
    summary: Content settings crop ratios operations
    description: API to access and manipulate the collection of content settings crop ratios
    post:
      tags:
        - content-settings-controller
      summary: Add a content settings crop ratio
      description: Create a new content settings crop ratio as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createCropRatio
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsCropRatio'
      responses:
        '200':
          $ref: '#/components/responses/stringsList_generic'
        '201':
          $ref: '#/components/responses/stringsList_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentSettings/cropRatios/{ratio}':
    summary: Content settings crop ratio operations
    description: API to access and manipulate a content settings crop ratio
    parameters:
      - $ref: '#/components/parameters/ratio'
    put:
      tags:
        - content-settings-controller
      summary: Update a content settings crop ratio
      description: Update the content settings crop ratio specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: editCropRatio
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsCropRatio'
      responses:
        '200':
          $ref: '#/components/responses/stringsList_generic'
        '201':
          $ref: '#/components/responses/stringsList_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-settings-controller
      summary: Delete a content settings crop ratio
      description: Delete the content settings crop ratio specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteCropRatio
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/restResponse-created'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contentSettings/editor:
    summary: Content settings editors operations
    description: API to access and manipulate the collection of content settings editors
    put:
      tags:
        - content-settings-controller
      summary: Set the content settings editor
      description: Set the content settings editor as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: setEditor
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsEditor'
      responses:
        '200':
          $ref: '#/components/responses/string_generic'
        '201':
          $ref: '#/components/responses/string_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/metadata:
    summary: Content settings metadata operations
    description: API to access and manipulate the collection of content settings metadata
    post:
      tags:
        - content-settings-controller
      summary: Add content settings metadata
      description: Create new content settings metadata as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createMetadata
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsMetadata'
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentSettings/metadata/{key}':
    summary: Content settings metadata operations
    description: API to access and manipulate a content settings metadata
    parameters:
      - $ref: '#/components/parameters/key'
    put:
      tags:
        - content-settings-controller
      summary: Update a content settings metadata
      description: Update the content settings metadata specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: editMetadata
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsMetadataForUpdate'
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-settings-controller
      summary: Delete a content settings metadata
      description: Delete the content settings metadata specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteMetadata
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contentSettings/reloadIndexes:
    summary: Content settings reload indexes operations
    description: API to perform a reload of the content settings indexes
    post:
      tags:
        - content-settings-controller
      summary: Reload the content settings indexes
      description: Reload the content settings indexes
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadIndexes
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/restResponse_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/reloadReferences:
    summary: Content settings reload references operations
    description: API to perform a reload of the content settings references
    post:
      tags:
        - content-settings-controller
      summary: Reload the content settings references
      description: Reload the content settings references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadContentSettingsReferences
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/restResponse_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentTypeAttributes:
    summary: Content type attributes operations
    description: API to access and manipulate the collection of content type attributes
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve the collection of content type attribute types
      description: Retrieve the collection of content type attribute types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributeTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/strings_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypeAttributes/{attributeTypeId}':
    summary: Content type attribute operations
    description: API to access and manipulate a content type attribute
    parameters:
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attribute type
      description: Retrieve a content type attribute type
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributeType
      responses:
        '200':
          $ref: '#/components/responses/attributeType_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypeAttributes/{contentTypeId}/attribute/{attributeTypeId}':
    summary: Content type attributes content attribute operations
    description: API to access and manipulate a content type attributes content attribute
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attributes content attribute
      description: Retrieve a content type attributes content attribute
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributesContentAttribute
      responses:
        '200':
          $ref: '#/components/responses/attributeType_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentTypes:
    summary: Content types operations
    description: API to access and manipulate the collection of content types
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve the collection of content types
      description: Retrieve the collection of content types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentTypesObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-type-resource-controller
      summary: Update content type
      description: Update a content type as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentType
      requestBody:
        $ref: '#/components/requestBodies/contentType'
      responses:
        '200':
          $ref: '#/components/responses/contentTypeObject_generic'
        '201':
          $ref: '#/components/responses/contentTypeObject_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-type-resource-controller
      summary: Create a content type
      description: Create a new content type as specified in the request body and add it to the content types collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createContentType
      requestBody:
        $ref: '#/components/requestBodies/contentType'
      responses:
        '200':
          $ref: '#/components/responses/contentTypeObject_generic'
        '201':
          $ref: '#/components/responses/contentTypeObject_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/refresh/{contentTypeId}':
    summary: Content typess refresh references operations
    description: API to perform a refresh of the content types references
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    post:
      tags:
        - content-type-resource-controller
      summary: Reload a content type references
      description: Reload a content type references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadContentTypeReferences
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}':
    summary: Content type operations
    description: API to access and manipulate a content type
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type
      description: Retrieve the content type specified in the path from the content types collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentType
      responses:
        '200':
          $ref: '#/components/responses/contentTypeObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-type-resource-controller
      summary: Delete a content type
      description: Delete the content type specified in the path from the content types collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContentType
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/restResponse-noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}/attributes':
    summary: Content type attributes operations
    description: API to access and manipulate a content type attributes
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attributes
      description: Retrieve the attributes of the content type specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributes
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFullList_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-type-resource-controller
      summary: Add an attribute to a content type
      description: Add to the content type specified in the path the attribute described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addContentTypeAttribute
      requestBody:
        $ref: '#/components/requestBodies/entityTypeAttribute'
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFullList_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}/attributes/{attributeId}':
    summary: Content type attribute operations
    description: API to access and manipulate a content type attribute
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
      - $ref: '#/components/parameters/attributeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attribute
      description: Retrieve the content type attirbute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFullList'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-type-resource-controller
      summary: Update a content type attribute
      description: Update the content type attribute specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentTypeAttribute
      requestBody:
        $ref: '#/components/requestBodies/entityTypeAttribute'
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFullList'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-type-resource-controller
      summary: Delete a content type attribute
      description: Delete the content type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContentTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/plugins/cms/contentTypes/{contentTypeId}/attributes/{attributeId}/moveDown':
    summary: Content type attribute move down operations
    description: API to perform a content type attribute move down
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
      - $ref: '#/components/parameters/attributeId'
    put:
      tags:
        - content-type-resource-controller
      summary: Move down a content type attribute
      description: Move down the content type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: moveDownContentTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}/attributes/{attributeId}/moveUp':
    summary: Content type attribute move up operations
    description: API to perform a content type attribute move up
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
      - $ref: '#/components/parameters/attributeId'
    put:
      tags:
        - content-type-resource-controller
      summary: Move up a content type attribute
      description: Move up the content type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: moveUpContentTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}/usage':
    summary: Content type usage operations
    description: API to access and manipulate a content type usage
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type usage
      description: Retrieve the usage count for the content type specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsageObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}/usage/details':
    summary: Content type usage details operations
    description: API to access and manipulate a content type usage details
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type usage details
      description: Retrieve the usage details for the content type specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeUsageDetails
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentTypesStatus:
    summary: Content types status operations
    description: API to access and manipulate the collection of content types status
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve the content types status
      description: Retrieve the content types status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypesStatus
      responses:
        '200':
          $ref: '#/components/responses/entityTypesStatus_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-type-resource-controller
      summary: Reload content types status references
      description: Reload content types status references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: refreshContentTypes
      requestBody:
        $ref: '#/components/requestBodies/contentTypeRefresh'
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contents:
    summary: Contents operations
    description: API to access and manipulate the collection of contents
    get:
      tags:
        - content-controller
      summary: Retrieve the collection of contents
      description: Retrieve the collection of contents filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContents
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/forLinkingWithExtraGroups'
        - $ref: '#/components/parameters/forLinkingWithOwnerGroup'
        - $ref: '#/components/parameters/mode'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/contentModel'
        - $ref: '#/components/parameters/orClauseCategoryFilter'
        - $ref: '#/components/parameters/resolveLink'
        - $ref: '#/components/parameters/contentStatus'
        - $ref: '#/components/parameters/text'
      responses:
        '200':
          $ref: '#/components/responses/contents'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update contents
      description: Update the contents collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContents
      requestBody:
        $ref: '#/components/requestBodies/contentsList'
      responses:
        '200':
          $ref: '#/components/responses/contentsList'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-controller
      summary: Add a content to the contents collection
      description: Create a new content as specified in the request body and add it to the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addContent
      requestBody:
        $ref: '#/components/requestBodies/content'
      responses:
        '200':
          $ref: '#/components/responses/contentsList'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-controller
      summary: Delete contents
      description: Delete elements of the contents collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContents
      requestBody:
        $ref: '#/components/requestBodies/contentsCodes'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contents/status:
    summary: Contents status
    description: API to access and manipulate the collection of contents status
    get:
      tags:
        - content-controller
      summary: Retrieve the collection of contents status
      description: Retrieve the collection of contents status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentsStatus
      responses:
        '200':
          $ref: '#/components/responses/contentsStatus'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update contents status
      description: Update the contents status collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentsStatus
      requestBody:
        $ref: '#/components/requestBodies/batchContentStatus'
      responses:
        '200':
          $ref: '#/components/responses/contentsListMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}':
    summary: Content operations
    description: API to access and manipulate a content
    parameters:
      - $ref: '#/components/parameters/contentId'
    get:
      tags:
        - content-controller
      summary: Retrieve a content
      description: Retrieve the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContent
      parameters:
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update a content
      description: Update the content specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContent
      requestBody:
        $ref: '#/components/requestBodies/content'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-controller
      summary: Delete a content
      description: Delete the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContent
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/plugins/cms/contents/{contentId}/clone':
    summary: Content clone operation
    description: API to clone a content
    parameters:
      - $ref: '#/components/parameters/contentId'
    post:
      tags:
        - content-controller
      summary: Clone a content
      description: Clone the content specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: cloneContent
      responses:
        '200':
          $ref: '#/components/responses/content'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}/model/{modelId}':
    summary: Content clone operation
    description: API to clone a content
    parameters:
      - $ref: '#/components/parameters/contentId'
      - $ref: '#/components/parameters/contentModelId'
    get:
      tags:
        - content-controller
      summary: Retrieve a content
      description: Retrieve the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getModelOfTheContent
      parameters:
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/resolveLinks'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}/status':
    summary: Content status operations
    description: API to access and manipulate a content status
    parameters:
      - $ref: '#/components/parameters/contentId'
    put:
      tags:
        - content-controller
      summary: Update content status
      description: Update the content status as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentStatus
      requestBody:
        $ref: '#/components/requestBodies/contentStatus'
      responses:
        '200':
          $ref: '#/components/responses/contentMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/emailSettings/senders:
    summary: E-mail senders collection operations
    description: API to access and manipulate the collection of e-mail senders
    get:
      tags:
        - email-sender-controller
      summary: Retrieve the collection of e-mail senders
      description: Retrieve the collection of e-mail senders filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getEmailSenders
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/emailSenders'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - email-sender-controller
      summary: Add an e-mail sender to the collection of e-mail senders
      description: Add an e-mail sender to the collection of e-mail senders as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addEmailSender
      requestBody:
        $ref: '#/components/requestBodies/emailSender'
      responses:
        '200':
          $ref: '#/components/responses/emailSender'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/emailSettings/senders/{senderId}':
    summary: E-mail sender operations
    description: API to access and manipulate an e-mail senders
    parameters:
      - $ref: '#/components/parameters/senderId'
    get:
      tags:
        - email-sender-controller
      summary: Retrieve an e-mail sender
      description: Retrieve the e-mail sender specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getEmailSender
      responses:
        '200':
          $ref: '#/components/responses/emailSender'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - email-sender-controller
      summary: Update an e-mail sender
      description: Update the e-mail sender specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateEmailSender
      requestBody:
        $ref: '#/components/requestBodies/emailSender'
      responses:
        '200':
          $ref: '#/components/responses/emailSender'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - email-sender-controller
      summary: Delete an e-mail sender
      description: Delete the e-mail sender specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: delteEmailSender
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
  /plugins/emailSettings/SMTPServer:
    summary: SMTP server operations
    description: API to access and manipulate the SMTP server
    get:
      tags:
        - smtp-server-configuration-controller
      summary: Retrieve the SMTP server
      description: Retrieve the SMTP server
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getSMTPServer
      responses:
        '200':
          $ref: '#/components/responses/smtpServer'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - smtp-server-configuration-controller
      summary: Update the SMTP server
      description: Update the SMTP server as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateSMTPServer
      requestBody:
        $ref: '#/components/requestBodies/smtpServer'
      responses:
        '200':
          $ref: '#/components/responses/smtpServer'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/emailSettings/SMTPServer/sendTestEmail:
    summary: SMTP server test email operation
    description: Perform the SMTP server test email operation
    post:
      tags:
        - smtp-server-configuration-controller
      summary: Send a test email
      description: Send a test email filtered by query parameter
      externalDocs:
        description: ''
        url: 'https://'
      operationId: sendTestEmail
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
  /plugins/emailSettings/SMTPServer/testConfiguration:
    summary: SMTP server test configuration operation
    description: Perform the SMTP server test configuration operation
    post:
      tags:
        - smtp-server-configuration-controller
      summary: Test the SMTP server configuration
      description: Test the SMTP server configuration described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: testConfiguration
      requestBody:
        $ref: '#/components/requestBodies/smtpServer'
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/ok'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
  /plugins/seo/pages:
    summary: SEO pages operations
    description: API to access contents and manipulate SEO pages
    post:
      tags:
        - seo-page-controller
      summary: Add a SEO page
      description: Create a new SEO page as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addSeoPage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/seoPage'
      responses:
        '200':
          $ref: '#/components/responses/seoPageFull'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/seo/pages/{seoPageId}':
    summary: SEO page operations
    description: API to access contents and manipulate a SEO page
    parameters:
      - $ref: '#/components/parameters/seoPageId'
    get:
      tags:
        - seo-page-controller
      summary: Retrieve a SEO page
      description: Retrieve the SEO page specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getSeoPage
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata_generic'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    put:
      tags:
        - seo-page-controller
      summary: Update a SEO page
      description: Update the SEO page specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateSeoPage
      parameters:
        - $ref: '#/components/parameters/authorizationAuthority'
        - $ref: '#/components/parameters/authorizationGroupAuthority'
        - $ref: '#/components/parameters/authorizationGroupDescr'
        - $ref: '#/components/parameters/authorizationGroupDescription'
        - $ref: '#/components/parameters/authorizationGroupEntandoGroup'
        - $ref: '#/components/parameters/authorizationGroupJapsGroup'
        - $ref: '#/components/parameters/authorizationGroupName'
        - $ref: '#/components/parameters/authorizationRoleAuthority'
        - $ref: '#/components/parameters/authorizationRoleDescription'
        - $ref: '#/components/parameters/authorizationRoleName'
        - $ref: '#/components/parameters/authorizationRolePermissions'
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
        - $ref: '#/components/parameters/accountNotExpired'
        - $ref: '#/components/parameters/credentialsNotExpired'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/entandoUser'
        - $ref: '#/components/parameters/japsUser'
        - $ref: '#/components/parameters/disabled'
      requestBody:
        $ref: '#/components/requestBodies/seoPage'
      responses:
        '200':
          $ref: '#/components/responses/pageMapMetadata_generic'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/versioning/contents:
    summary: Contents versioning operations
    description: API to access contents versioning
    get:
      tags:
        - content-versioning-controller
      summary: Retrieve the contents versioning
      description: Retrieve the contents versioning filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentsVersioning
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentVersions'
        '201':
          $ref: '#/components/responses/contentVersions-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/contents/{contentId}':
    summary: Content versioning operations
    description: API to access content versioning
    parameters:
      - $ref: '#/components/parameters/contentId'
    get:
      tags:
        - content-versioning-controller
      summary: Retrieve the content versioning
      description: Retrieve the content versioning filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentVersioning
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentVersions'
        '201':
          $ref: '#/components/responses/contentVersions-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/contents/{contentId}/versions/{versionId}':
    summary: Content version operations
    description: API to access and manipulate a content version
    parameters:
      - $ref: '#/components/parameters/contentId'
      - $ref: '#/components/parameters/versionId'
    get:
      tags:
        - content-versioning-controller
      summary: Retrieve the content version
      description: Retrieve the content version specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentVersion
      responses:
        '200':
          $ref: '#/components/responses/contentObject'
        '201':
          $ref: '#/components/responses/contentObject-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    delete:
      tags:
        - content-versioning-controller
      summary: Delete a content version
      description: Delete the content version specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContentVersion
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/restResponse-created'
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/contents/{contentId}/versions/{versionId}/recover':
    summary: Content version recover operation
    description: API to recover a content version
    parameters:
      - $ref: '#/components/parameters/contentId'
      - $ref: '#/components/parameters/versionId'
    post:
      tags:
        - content-versioning-controller
      summary: Recover a content version
      description: Recover the content version specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: recoverContentVersion
      responses:
        '200':
          $ref: '#/components/responses/contentObject'
        '201':
          $ref: '#/components/responses/contentObject-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/versioning/resources:
    summary: Resources versioning operations
    description: API to access and manipulate resources versioning
    get:
      tags:
        - resource-versioning-controller
      summary: Retrieve the resources versioning
      description: Retrieve the resources versioning filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getResourcesVersioning
      parameters:
        - $ref: '#/components/parameters/resourcesTypeCode'
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/trashedResources_generic'
        '201':
          $ref: '#/components/responses/trashedResources_generic-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/resources/{resourceId}':
    summary: Resource versioning operations
    description: API to access and manipulate resource versioning
    parameters:
      - $ref: '#/components/parameters/resourceId'
    delete:
      tags:
        - resource-versioning-controller
      summary: Delete a resource versioning
      description: Delete the resource versioning specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteResourceVersioning
      responses:
        '200':
          $ref: '#/components/responses/trashedResourceObject_generic'
        '201':
          $ref: '#/components/responses/trashedResourceObject_generic-created'
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/resources/{resourceId}/recover':
    summary: Resource versioning recover operations
    description: API to access and manipulate resource versioning recover
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      tags:
        - resource-versioning-controller
      summary: Recover a resource versioning
      description: Recover the resource versioning specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: recoverResourceVersioning
      responses:
        '200':
          $ref: '#/components/responses/trashedResourceObject_generic'
        '201':
          $ref: '#/components/responses/trashedResourceObject_generic-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/versioning/resources/{resourceId}/{size}':
    summary: Resource versioning size operations
    description: API to access and manipulate resource versioning size
    parameters:
      - $ref: '#/components/parameters/resourceId'
      - $ref: '#/components/parameters/size'
    get:
      tags:
        - resource-versioning-controller
      summary: Retrieve a resource versioning size
      description: Retrieve the resource versioning size specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getResourceVersioningSize
      responses:
        '200':
          $ref: '#/components/responses/responseEntityObject_octet'
        '201':
          $ref: '#/components/responses/responseEntityObject_octet-created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/badRequest'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /profileTypeAttributes:
    summary: Profile type attributes operations
    description: API to access and manipulate profile type attributes
    get:
      tags:
        - profile-type-controller
      summary: Retrieve profile type attributes types
      description: Retrieve the profile type attributes types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypeAttributesTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/strings'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypeAttributes/{attributeTypeId}':
    summary: Profile type attribute operations
    description: API to access and manipulate profile type attribute
    parameters:
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - profile-type-controller
      summary: Retrieve profile type attributes type
      description: Retrieve the profile type attributes type specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypeAttributesType
      responses:
        '200':
          $ref: '#/components/responses/attributeType'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypeAttributes/{profileTypeId}/attribute/{attributeTypeId}':
    summary: Profile type attributes profile attribute operations
    description: API to access and manipulate a profile type attributes profile attribute
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - profile-type-controller
      summary: Retrieve profile type attributes profile attribute
      description: Retrieve the profile type attributes profile attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypeAttributesProfileAttribute
      responses:
        '200':
          $ref: '#/components/responses/attributeType'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /profileTypes:
    summary: Profile types operations
    description: API to access and manipulate profile types
    get:
      tags:
        - profile-type-controller
      summary: Retrieve the collection of profile types
      description: Retrieve the collection of profile types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/entityTypesShort'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - profile-type-controller
      summary: Add a profile type to the collection of profile types
      description: Add a profile type to the collection of profile types as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addProfileType
      requestBody:
        $ref: '#/components/requestBodies/profileType'
      responses:
        '200':
          $ref: '#/components/responses/userProfileType'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypes/refresh/{profileTypeId}':
    summary: Profile type refresh operations
    description: API to access and manipulate a profile type refresh
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
    post:
      tags:
        - profile-type-controller
      summary: Refresh a profile type
      description: Reload a profile type references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: refreshProfileType
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypes/{profileTypeId}':
    summary: Profile type operations
    description: API to access and manipulate a profile type
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
    get:
      tags:
        - profile-type-controller
      summary: Retrieve a profile type
      description: Retrieve the profile type specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileType
      responses:
        '200':
          $ref: '#/components/responses/userProfileType'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - profile-type-controller
      summary: Update a profile type
      description: Update the profile type specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateProfileType
      requestBody:
        $ref: '#/components/requestBodies/profileType'
      responses:
        '200':
          $ref: '#/components/responses/userProfileType'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - profile-type-controller
      summary: Delete a profile type
      description: Delete the profile type specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteProfileType
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/profileTypes/{profileTypeId}/attribute':
    summary: Profile type attributes operations
    description: API to access and manipulate a profile type attrributes
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
    post:
      tags:
        - profile-type-controller
      summary: Add a profile type attribute
      description: Add an attribute to the profile type specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addProfileTypeAttribute.yaml
      requestBody:
        $ref: '#/components/requestBodies/entityTypeAttribute'
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFull'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypes/{profileTypeId}/attribute/{attributeId}':
    summary: Profile type attribute operations
    description: API to access and manipulate a profile type attrribute
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
      - $ref: '#/components/parameters/attributeId'
    get:
      tags:
        - profile-type-controller
      summary: Retrieve a profile type attribute
      description: Retrieve the profile type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFull'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - profile-type-controller
      summary: Update a profile type attribute
      description: Update the profile type attribute specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateProfileTypeAttribute
      requestBody:
        $ref: '#/components/requestBodies/entityTypeAttribute'
      responses:
        '200':
          $ref: '#/components/responses/entityTypeAttributeFull'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - profile-type-controller
      summary: Delete a profile type attribute
      description: Delete the profile type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteProfileTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/profileTypes/{profileTypeId}/attribute/{attributeId}/moveDown':
    summary: Profile type attribute move down operations
    description: API to perform a profile type attribute move down
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
      - $ref: '#/components/parameters/attributeId'
    put:
      tags:
        - profile-type-controller
      summary: Move down a profile type attribute
      description: Move down the profile type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: moveDownProfileTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/profileTypes/{profileTypeId}/attribute/{attributeId}/moveUp':
    summary: Profile type attribute move up operations
    description: API to perform a profile type attribute move up
    parameters:
      - $ref: '#/components/parameters/profileTypeId'
      - $ref: '#/components/parameters/attributeId'
    put:
      tags:
        - profile-type-controller
      summary: Move up a profile type attribute
      description: Move up the profile type attribute specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: moveupProfileTypeAttribute
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /profileTypesStatus:
    summary: Profile types status operations
    description: API to access and manipulate profile types status
    get:
      tags:
        - profile-type-controller
      summary: Retrieve the profile types status
      description: Retrieve the profile types status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getProfileTypesStatus
      responses:
        '200':
          $ref: '#/components/responses/entityTypesStatus'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - profile-type-controller
      summary: Refresh the profile types status
      description: Refresh the profile types status described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: refreshProfileTypesStatus
      requestBody:
        $ref: '#/components/requestBodies/profileTypeRefreshStatus'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /reloadConfiguration:
    summary: Reload configuration operations
    description: API to perform a reload of the configuration
    post:
      tags:
        - reload-configuration-controller
      summary: Reload the configuration
      description: Reload the configuration
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadConfiguration
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /roles:
    summary: Roles operations
    description: API to access and manipulate roles
    get:
      tags:
        - role-controller
      summary: Retrieve the collection of roles
      description: Retrieve the collection of roles filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getRoles
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/roles'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - role-controller
      summary: Add a role
      description: Create a new role as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addRole
      requestBody:
        $ref: '#/components/requestBodies/role'
      responses:
        '200':
          $ref: '#/components/responses/role'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/roles/{roleId}':
    summary: Role operations
    description: API to access and manipulate role
    parameters:
      - $ref: '#/components/parameters/roleId'
    get:
      tags:
        - role-controller
      summary: Retrieve a role
      description: Retrieve the role specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getRole
      responses:
        '200':
          $ref: '#/components/responses/role'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - role-controller
      summary: Update a role
      description: Update the role specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateRole
      requestBody:
        $ref: '#/components/requestBodies/role'
      responses:
        '200':
          $ref: '#/components/responses/role'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - role-controller
      summary: Delete a role
      description: Delete the role specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteRole
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    patch:
      tags:
        - role-controller
      summary: Patch a role
      description: Patch the role specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: patchRole
      requestBody:
        $ref: '#/components/requestBodies/jsonNode'
      responses:
        '200':
          $ref: '#/components/responses/role'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/roles/{roleId}/userreferences':
    summary: Role userreferences operations
    description: API to access and manipulate role userreferences
    parameters:
      - $ref: '#/components/parameters/roleId'
    get:
      tags:
        - role-controller
      summary: Retrieve a role user preferences
      description: Retrieve the user preferences of the role specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getRoleUserPreferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/users'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /system/report:
    summary: System report operations
    description: API to access the system report
    get:
      tags:
        - system-controller
      summary: Retrieve the system report
      description: Retrieve the system report
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getSystemReport
      responses:
        '200':
          $ref: '#/components/responses/booleanMap'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /userProfiles:
    summary: User profiles operations
    description: API to access and manipulate user profiles
    post:
      tags:
        - profile-controller
      summary: Add a user profile to the user profiles collection
      description: Create a new user profile as specified in the request body and add it to the user profiles collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addUserProfile
      requestBody:
        $ref: '#/components/requestBodies/entity'
      responses:
        '200':
          $ref: '#/components/responses/entity'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/userProfiles/{userId}':
    summary: User profile operations
    description: API to access and manipulate a user profile
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - profile-controller
      summary: Retrieve a user profile
      description: Retrieve the user profile specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getUserProfile
      responses:
        '200':
          $ref: '#/components/responses/entity'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - profile-controller
      summary: Update a user profile
      description: Update the user profile specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateUserProfile
      requestBody:
        $ref: '#/components/requestBodies/entity'
      responses:
        '200':
          $ref: '#/components/responses/entity'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /widget/navigator/expressions:
    summary: Widget navigator expressions operations
    description: API to access and manipulate widget navigator expressions
    post:
      tags:
        - navigator-widget-config-controller
      summary: Retrieve the widget navigator expressions
      description: Retrieve the widget navigator expressions by nav spec
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getWidgetNavigatorExpressions
      requestBody:
        $ref: '#/components/requestBodies/navigatorConfig'
      responses:
        '200':
          $ref: '#/components/responses/navigatorConfig'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /widget/navigator/navspec:
    summary: Widget navigator nav spec operations
    description: API to access and manipulate widget navigator nav spec
    post:
      tags:
        - navigator-widget-config-controller
      summary: Retrieve the widget navigator nav spec
      description: Retrieve the widget navigator nav spec by expressions
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getWidgetNavigatorNavSpec
      requestBody:
        $ref: '#/components/requestBodies/navigatorConfig'
      responses:
        '200':
          $ref: '#/components/responses/navigatorConfig'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
components:
  schemas:
    activityStreamRecord:
      title: Activity stream record
      type: object
      properties:
        actionName:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/activityStreamCommentInfo'
        createdAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        likes:
          type: array
          items:
            $ref: '#/components/schemas/activityStreamLikeInfo'
        namespace:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        updatedAt:
          type: string
          format: date-time
        username:
          type: string
    activityStreamCommentInfo:
      title: Activity stream record comment info
      type: object
      properties:
        commentDate:
          type: string
          format: date-time
        commentText:
          type: string
        displayName:
          type: string
        id:
          type: integer
          format: int32
        username:
          type: string
    activityStreamLikeInfo:
      title: Activity stream record like info
      type: object
      properties:
        displayName:
          type: string
        username:
          type: string
    asset:
      title: Asset
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
        correlationCode:
          type: string
        createdAt:
          type: string
          format: date-time
        description:
          type: string
        fileName:
          type: string
        folderPath:
          type: string
        group:
          type: string
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        type:
          type: string
        updatedAt:
          type: string
          format: date-time
    attributeProperty:
      title: Attribute property
      type: object
      properties:
        code:
          type: string
        descr:
          type: string
    attributeType:
      title: Attribute type
      type: object
      properties:
        allowedDisablingCodes:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        allowedRoles:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        assignedRoles:
          type: object
          additionalProperties:
            type: string
        code:
          type: string
        dateFilterSupported:
          type: boolean
        enumeratorExtractorBeans:
          type: array
          items:
            type: string
        enumeratorMapExtractorBeans:
          type: array
          items:
            type: string
        enumeratorMapOptionsSupported:
          type: boolean
        enumeratorOptionsSupported:
          type: boolean
        indexableOptionSupported:
          type: boolean
        listAttribute:
          type: boolean
        multilingual:
          type: boolean
        numberFilterSupported:
          type: boolean
        searchableOptionSupported:
          type: boolean
        simple:
          type: boolean
        textAttribute:
          type: boolean
        textFilterSupported:
          type: boolean
    basicFileAttributeView:
      title: Basic file attribute view
      type: object
      properties:
        directory:
          type: boolean
        lastModifiedTime:
          type: string
        name:
          type: string
        path:
          type: string
        protectedFolder:
          type: boolean
        size:
          type: integer
          format: int64
    category:
      title: Category
      type: object
      properties:
        children:
          type: array
          items:
            type: string
        code:
          type: string
        fullTitles:
          type: object
          additionalProperties:
            type: string
        parentCode:
          type: string
        references:
          type: object
          additionalProperties:
            type: boolean
        titles:
          type: object
          additionalProperties:
            type: string
    component:
      title: Component
      type: object
      properties:
        artifactGroupId:
          type: string
        artifactId:
          type: string
        artifactVersion:
          type: string
        code:
          type: string
        description:
          type: string
        tableMapping:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/wildCardType'
    componentInstallationReport:
      title: Component installation report
      type: object
      properties:
        artifactGroupId:
          type: string
        artifactId:
          type: string
        artifactVersion:
          type: string
        code:
          type: string
        date:
          type: string
        description:
          type: string
    componentUsage:
      title: Component usage
      type: object
      properties:
        code:
          type: string
        status:
          type: string
        type:
          type: string
        usage:
          type: integer
          format: int32
    componentUsageEntity:
      title: Component usage entity
      type: object
      properties:
        code:
          type: string
        status:
          type: string
        type:
          type: string
    consumer:
      title: Consumer
      type: object
      properties:
        authorizedGrantTypes:
          type: array
          items:
            type: string
        callbackUrl:
          type: string
        description:
          type: string
        expirationDate:
          type: string
        issuedDate:
          type: string
        key:
          type: string
        name:
          type: string
        scope:
          type: string
        secret:
          type: string
    content:
      title: Content
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        categories:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        defaultModel:
          type: string
        description:
          type: string
        firstEditor:
          type: string
        groups:
          type: array
          items:
            type: string
        html:
          type: string
        id:
          type: string
        lastEditor:
          type: string
        lastModified:
          type: string
          format: date-time
        listModel:
          type: string
        mainGroup:
          type: string
        onLine:
          type: boolean
        references:
          type: object
          additionalProperties:
            type: boolean
        restriction:
          type: string
        status:
          type: string
        typeCode:
          type: string
        typeDescription:
          type: string
        version:
          type: string
        viewPage:
          type: string
    contentModel:
      title: Content model
      required:
        - id
        - descr
        - contentType
      type: object
      properties:
        contentShape:
          type: string
        contentType:
          type: string
          pattern: '[A-Z]{3}'
        descr:
          type: string
        id:
          type: integer
          format: int64
        stylesheet:
          type: string
    contentModelReference:
      title: Content model reference
      type: object
      properties:
        online:
          type: boolean
        pageCode:
          type: string
        widgetPosition:
          type: integer
          format: int32
    contentSettings:
      title: Content settings
      type: object
      properties:
        cropRatios:
          type: array
          items:
            type: string
        editor:
          type: string
          enum:
            - '{label=None, key=none}'
            - '{label=CKEditor, key=fckeditor}'
        indexesLastReload:
          $ref: '#/components/schemas/lastReloadInfo'
        indexesStatus:
          type: integer
          format: int32
        metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/wildCardType'
        referencesStatus:
          type: integer
          format: int32
    contentType:
      title: Content type
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityTypeAttribute'
        code:
          type: string
        defaultContentModel:
          type: string
        defaultContentModelList:
          type: string
        name:
          type: string
        status:
          type: string
        viewPage:
          type: string
    contentVersion:
      title: Content version
      type: object
      properties:
        approved:
          type: boolean
        contentId:
          type: string
        contentType:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        onlineVersion:
          type: integer
          format: int32
        status:
          type: string
        username:
          type: string
        version:
          type: string
        versionDate:
          type: string
          format: date-time
    defaultWidget:
      title: Default widget
      type: object
      properties:
        code:
          type: string
        properties:
          type: object
          additionalProperties:
            type: object
            properties: {}
    dumpReport:
      title: Dump report
      type: object
      properties:
        code:
          type: string
        componentsHistory:
          type: array
          items:
            $ref: '#/components/schemas/componentInstallationReport'
        dataSourcesReports:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/tableDumpReport'
        date:
          type: string
        requiredTime:
          type: integer
          format: int64
    contentsStatus:
      title: Contents status
      type: object
      properties:
        latestModificationDate:
          type: string
          format: date-time
        published:
          type: integer
          format: int32
        ready:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        unpublished:
          type: integer
          format: int32
    emailSender:
      title: E-mail sender
      type: object
      properties:
        code:
          type: string
        email:
          type: string
    entity:
      title: Entity
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        description:
          type: string
        groups:
          type: array
          items:
            type: string
        id:
          type: string
        mainGroup:
          type: string
        typeCode:
          type: string
        typeDescription:
          type: string
    entityAttribute:
      title: Entity attribute
      type: object
      properties:
        code:
          type: string
        compositeelements:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        elements:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        listelements:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/entityAttribute'
        value:
          type: object
          properties: {}
        values:
          type: object
          properties: {}
    entityManager:
      title: Entity manager
      type: object
      properties:
        code:
          type: string
        entityTypes:
          type: array
          items:
            $ref: '#/components/schemas/entityType'
    entityType:
      title: Entity type
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityTypeAttribute'
        code:
          type: string
        name:
          type: string
        status:
          type: string
    entityTypeAttribute:
      title: Entity type attribute
      type: object
      properties:
        code:
          type: string
        disablingCodes:
          type: array
          items:
            type: string
        listFilter:
          type: boolean
        mandatory:
          type: boolean
        name:
          type: string
        names:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        type:
          type: string
    entityTypeAttributeFull:
      title: Entity type attribute full
      allOf:
        - $ref: '#/components/schemas/entityTypeAttribute'
        - type: object
          properties:
            compositeAttributes:
              type: array
              items:
                $ref: '#/components/schemas/entityTypeAttributeFull'
            enumeratorExtractorBean:
              type: string
            enumeratorStaticItems:
              type: string
            enumeratorStaticItemsSeparator:
              type: string
            indexable:
              type: boolean
            nestedAttribute:
              $ref: '#/components/schemas/entityTypeAttributeFull'
            validationRules:
              $ref: '#/components/schemas/entityTypeAttributeValidation'
    entityTypeAttributeOGNLValidation:
      title: Entity type attribute OGNL validation
      type: object
      properties:
        applyOnlyToFilledAttr:
          type: boolean
        errorMessage:
          type: string
        helpMessage:
          type: string
        keyForErrorMessage:
          type: string
        keyForHelpMessage:
          type: string
        ognlExpression:
          type: string
    entityTypeAttributeValidation:
      title: Entity type attribute validation
      type: object
      properties:
        equalDate:
          type: string
        equalDateAttribute:
          type: string
        equalNumber:
          type: integer
          format: int32
        equalNumberAttribute:
          type: string
        equalString:
          type: string
        equalStringAttribute:
          type: string
        maxLength:
          type: integer
          format: int32
        minLength:
          type: integer
          format: int32
        ognlValidation:
          $ref: '#/components/schemas/entityTypeAttributeOGNLValidation'
        rangeEndDate:
          type: string
        rangeEndDateAttribute:
          type: string
        rangeEndNumber:
          type: integer
          format: int32
        rangeEndNumberAttribute:
          type: string
        rangeEndString:
          type: string
        rangeEndStringAttribute:
          type: string
        rangeStartDate:
          type: string
        rangeStartDateAttribute:
          type: string
        rangeStartNumber:
          type: integer
          format: int32
        rangeStartNumberAttribute:
          type: string
        rangeStartString:
          type: string
        rangeStartStringAttribute:
          type: string
        regex:
          type: string
    entityTypeShort:
      title: Entity type short
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        status:
          type: string
    entityTypesStatus:
      title: Entity types status
      type: object
      properties:
        ready:
          type: array
          items:
            type: string
        refreshing:
          type: array
          items:
            type: string
        toRefresh:
          type: array
          items:
            type: string
    filter:
      title: Filter
      type: object
      properties:
        attribute:
          type: string
        entityAttr:
          type: string
        operator:
          type: string
        order:
          type: string
        type:
          type: string
        value:
          type: string
        allowedValues:
          type: array
          items:
            type: string
    fragment:
      title: Fragment
      type: object
      properties:
        code:
          type: string
        defaultGuiCode:
          type: string
        fragments:
          type: array
          items:
            $ref: '#/components/schemas/fragmentRef'
        guiCode:
          type: string
        locked:
          type: boolean
        pageModels:
          type: array
          items:
            $ref: '#/components/schemas/pageModelRef'
        pluginCode:
          type: string
        widgetType:
          $ref: '#/components/schemas/widgetTypeRef'
        widgetTypeCode:
          type: string
    fragmentRef:
      title: Fragment reference
      type: object
      properties:
        code:
          type: string
    fragmentSmall:
      title: Fragment small
      type: object
      properties:
        code:
          type: string
        locked:
          type: boolean
        pluginCode:
          type: string
        widgetType:
          $ref: '#/components/schemas/widgetTypeRef'
        widgetTypeCode:
          type: string
    frame:
      title: Frame
      type: object
      properties:
        defaultWidget:
          $ref: '#/components/schemas/defaultWidget'
        descr:
          type: string
        mainFrame:
          type: boolean
        pos:
          type: integer
          format: int32
        sketch:
          $ref: '#/components/schemas/frameSketch'
    frameSketch:
      title: Frame sketch
      type: object
      properties:
        x1:
          type: integer
          format: int32
          xml:
            name: x1
            attribute: false
            wrapped: false
        x2:
          type: integer
          format: int32
          xml:
            name: x2
            attribute: false
            wrapped: false
        y1:
          type: integer
          format: int32
          xml:
            name: y1
            attribute: false
            wrapped: false
        y2:
          type: integer
          format: int32
          xml:
            name: y2
            attribute: false
            wrapped: false
      xml:
        name: sketch
        attribute: false
        wrapped: false
    group:
      title: Group
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        references:
          type: object
          additionalProperties:
            type: boolean
    iEntityModelDictionary:
      title: IEntity model dictionary
      type: object
      properties:
        entityRootName:
          type: string
    label:
      title: Label
      type: object
      properties:
        key:
          type: string
        titles:
          type: object
          additionalProperties:
            type: string
    language:
      title: Language
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        isDefault:
          type: boolean
    lastReloadInfo:
      title: Last reload info
      type: object
      properties:
        date:
          type: string
          format: date-time
        result:
          type: integer
          format: int32
    modelAndView:
      title: Model and view
      type: object
      properties:
        empty:
          type: boolean
        model:
          type: object
          properties: {}
        modelMap:
          type: object
          additionalProperties:
            type: object
            properties: {}
        reference:
          type: boolean
        status:
          type: string
          enum:
            - CONTINUE
            - SWITCHING_PROTOCOLS
            - PROCESSING
            - CHECKPOINT
            - OK
            - CREATED
            - ACCEPTED
            - NON_AUTHORITATIVE_INFORMATION
            - NO_CONTENT
            - RESET_CONTENT
            - PARTIAL_CONTENT
            - MULTI_STATUS
            - ALREADY_REPORTED
            - IM_USED
            - MULTIPLE_CHOICES
            - MOVED_PERMANENTLY
            - FOUND
            - MOVED_TEMPORARILY
            - SEE_OTHER
            - NOT_MODIFIED
            - USE_PROXY
            - TEMPORARY_REDIRECT
            - PERMANENT_REDIRECT
            - BAD_REQUEST
            - UNAUTHORIZED
            - PAYMENT_REQUIRED
            - FORBIDDEN
            - NOT_FOUND
            - METHOD_NOT_ALLOWED
            - NOT_ACCEPTABLE
            - PROXY_AUTHENTICATION_REQUIRED
            - REQUEST_TIMEOUT
            - CONFLICT
            - GONE
            - LENGTH_REQUIRED
            - PRECONDITION_FAILED
            - PAYLOAD_TOO_LARGE
            - REQUEST_ENTITY_TOO_LARGE
            - URI_TOO_LONG
            - REQUEST_URI_TOO_LONG
            - UNSUPPORTED_MEDIA_TYPE
            - REQUESTED_RANGE_NOT_SATISFIABLE
            - EXPECTATION_FAILED
            - I_AM_A_TEAPOT
            - INSUFFICIENT_SPACE_ON_RESOURCE
            - METHOD_FAILURE
            - DESTINATION_LOCKED
            - UNPROCESSABLE_ENTITY
            - LOCKED
            - FAILED_DEPENDENCY
            - TOO_EARLY
            - UPGRADE_REQUIRED
            - PRECONDITION_REQUIRED
            - TOO_MANY_REQUESTS
            - REQUEST_HEADER_FIELDS_TOO_LARGE
            - UNAVAILABLE_FOR_LEGAL_REASONS
            - INTERNAL_SERVER_ERROR
            - NOT_IMPLEMENTED
            - BAD_GATEWAY
            - SERVICE_UNAVAILABLE
            - GATEWAY_TIMEOUT
            - HTTP_VERSION_NOT_SUPPORTED
            - VARIANT_ALSO_NEGOTIATES
            - INSUFFICIENT_STORAGE
            - LOOP_DETECTED
            - BANDWIDTH_LIMIT_EXCEEDED
            - NOT_EXTENDED
            - NETWORK_AUTHENTICATION_REQUIRED
        view:
          $ref: '#/components/schemas/view'
        viewName:
          type: string
    navigatorConfig:
      title: Navigator config
      type: object
      properties:
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/navigatorExpression'
        navSpec:
          type: string
    navigatorExpression:
      title: Navigator expression
      type: object
      properties:
        operator:
          type: string
        operatorSubtreeLevel:
          type: integer
          format: int32
        spec:
          type: string
        specAbsLevel:
          type: integer
          format: int32
        specSuperLevel:
          type: integer
          format: int32
        targetCode:
          type: string
    page:
      title: Page
      type: object
      properties:
        charset:
          type: string
        children:
          type: array
          items:
            type: string
        code:
          type: string
        contentType:
          type: string
        displayedInMenu:
          type: boolean
        fullPath:
          type: string
        fullTitles:
          type: object
          additionalProperties:
            type: string
        joinGroups:
          type: array
          items:
            type: string
        lastModified:
          type: string
        numWidget:
          type: integer
          format: int32
        onlineInstance:
          type: boolean
        ownerGroup:
          type: string
        pageModel:
          type: string
        parentCode:
          type: string
        position:
          type: integer
          format: int32
        references:
          type: object
          additionalProperties:
            type: boolean
        seo:
          type: boolean
        status:
          type: string
        titles:
          type: object
          additionalProperties:
            type: string
        token:
          type: string
    pageConfiguration:
      title: Page configuration
      type: object
      properties:
        changed:
          type: boolean
        code:
          type: string
        metadata:
          $ref: '#/components/schemas/pageMetadata'
        online:
          type: boolean
        ownerGroup:
          type: string
        parentCode:
          type: string
        position:
          type: integer
          format: int32
        root:
          type: boolean
        status:
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/widgetConfiguration'
    pageMetadata:
      title: Page metadata
      type: object
      properties:
        charset:
          type: string
        extraGroups:
          type: array
          items:
            type: string
        mimeType:
          type: string
        model:
          type: string
        showable:
          type: boolean
        titles:
          type: object
          additionalProperties:
            type: object
            properties: {}
        updatedAt:
          type: string
          format: date-time
        useExtraTitles:
          type: boolean
    pageModel:
      title: Page model
      type: object
      properties:
        code:
          type: string
        configuration:
          $ref: '#/components/schemas/pageModelConfiguration'
        descr:
          type: string
        mainFrame:
          type: integer
          format: int32
        pluginCode:
          type: string
        references:
          type: object
          additionalProperties:
            type: boolean
        template:
          type: string
    pageModelConfiguration:
      title: Page model configuration
      type: object
      properties:
        frames:
          type: array
          items:
            $ref: '#/components/schemas/frame'
    pageModelRef:
      title: Page model reference
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    pageStatus:
      title: Page status
      type: object
      properties:
        draft:
          type: integer
          format: int32
        lastUpdate:
          type: string
        published:
          type: integer
          format: int32
        unpublished:
          type: integer
          format: int32
    pagedRestResponse:
      title: Paged REST response
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseListPayload'
        - properties:
            metadata:
              $ref: '#/components/schemas/paginationMetadata'
    paginationMetadata:
      title: Pagination metadata
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        lastPage:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int32
        sort:
          type: string
        direction:
          type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/filter'
        additionalParams:
          type: object
          additionalProperties:
            type: string
    permission:
      title: Permission
      type: object
      properties:
        code:
          type: string
        descr:
          type: string
    profileType:
      title: Profile type
      type: object
      properties:
        typeCode:
          type: string
        typeDescription:
          type: string
    responseEntity:
      title: Response entity
      type: object
      properties:
        body:
          type: object
          properties: {}
        statusCode:
          type: string
          enum:
            - CONTINUE
            - SWITCHING_PROTOCOLS
            - PROCESSING
            - CHECKPOINT
            - OK
            - CREATED
            - ACCEPTED
            - NON_AUTHORITATIVE_INFORMATION
            - NO_CONTENT
            - RESET_CONTENT
            - PARTIAL_CONTENT
            - MULTI_STATUS
            - ALREADY_REPORTED
            - IM_USED
            - MULTIPLE_CHOICES
            - MOVED_PERMANENTLY
            - FOUND
            - MOVED_TEMPORARILY
            - SEE_OTHER
            - NOT_MODIFIED
            - USE_PROXY
            - TEMPORARY_REDIRECT
            - PERMANENT_REDIRECT
            - BAD_REQUEST
            - UNAUTHORIZED
            - PAYMENT_REQUIRED
            - FORBIDDEN
            - NOT_FOUND
            - METHOD_NOT_ALLOWED
            - NOT_ACCEPTABLE
            - PROXY_AUTHENTICATION_REQUIRED
            - REQUEST_TIMEOUT
            - CONFLICT
            - GONE
            - LENGTH_REQUIRED
            - PRECONDITION_FAILED
            - PAYLOAD_TOO_LARGE
            - REQUEST_ENTITY_TOO_LARGE
            - URI_TOO_LONG
            - REQUEST_URI_TOO_LONG
            - UNSUPPORTED_MEDIA_TYPE
            - REQUESTED_RANGE_NOT_SATISFIABLE
            - EXPECTATION_FAILED
            - I_AM_A_TEAPOT
            - INSUFFICIENT_SPACE_ON_RESOURCE
            - METHOD_FAILURE
            - DESTINATION_LOCKED
            - UNPROCESSABLE_ENTITY
            - LOCKED
            - FAILED_DEPENDENCY
            - TOO_EARLY
            - UPGRADE_REQUIRED
            - PRECONDITION_REQUIRED
            - TOO_MANY_REQUESTS
            - REQUEST_HEADER_FIELDS_TOO_LARGE
            - UNAVAILABLE_FOR_LEGAL_REASONS
            - INTERNAL_SERVER_ERROR
            - NOT_IMPLEMENTED
            - BAD_GATEWAY
            - SERVICE_UNAVAILABLE
            - GATEWAY_TIMEOUT
            - HTTP_VERSION_NOT_SUPPORTED
            - VARIANT_ALSO_NEGOTIATES
            - INSUFFICIENT_STORAGE
            - LOOP_DETECTED
            - BANDWIDTH_LIMIT_EXCEEDED
            - NOT_EXTENDED
            - NETWORK_AUTHENTICATION_REQUIRED
        statusCodeValue:
          type: integer
          format: int32
    restError:
      title: REST error
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    restResponse:
      title: REST response
      type: object
      properties:
        payload:
          type: object
        metadata:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/restError'
    restResponseListPayload:
      title: REST response list payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: array
              items:
                type: object
    restResponseListPayloadMapMetadata:
      title: REST response list payload map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseMapMetadata'
        - $ref: '#/components/schemas/restResponseListPayload'
    restResponseMapMetadata:
      title: REST response map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            metadata:
              type: object
              additionalProperties:
                type: string
    restResponseMapPayload:
      title: REST response map payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: object
              additionalProperties:
                type: string
    role:
      title: Role
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        permissions:
          type: object
          additionalProperties:
            type: boolean
    seoData:
      title: SEO data
      type: object
      properties:
        seoDataByLang:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/seoDataByLang'
        useExtraDescriptions:
          type: boolean
        useExtraTitles:
          type: boolean
    seoDataByLang:
      title: SEO data by lang
      type: object
      properties:
        description:
          type: string
        friendlyCode:
          type: string
        inheritDescriptionFromDefaultLang:
          type: boolean
        inheritFriendlyCodeFromDefaultLang:
          type: boolean
        inheritKeywordsFromDefaultLang:
          type: boolean
        keywords:
          type: string
        metaTags:
          type: array
          items:
            $ref: '#/components/schemas/seoMetatag'
    seoMetatag:
      title: SEO metatag
      type: object
      properties:
        key:
          type: string
        type:
          type: string
        useDefaultLang:
          type: boolean
        value:
          type: string
    seoPage:
      title: SEO page
      type: object
      properties:
        charset:
          type: string
        code:
          type: string
        contentType:
          type: string
        displayedInMenu:
          type: boolean
        joinGroups:
          type: array
          items:
            type: string
        ownerGroup:
          type: string
        pageModel:
          type: string
        parentCode:
          type: string
        seo:
          type: boolean
        seoData:
          $ref: '#/components/schemas/seoData'
        status:
          type: string
        titles:
          type: object
          additionalProperties:
            type: string
    seoPageFull:
      title: SEO page full
      type: object
      allOf:
        - $ref: '#/components/schemas/seoPage'
        - properties:
            children:
              type: array
              items:
                type: string
            fullPath:
              type: string
            fullTitles:
              type: object
              additionalProperties:
                type: string
            lastModified:
              type: string
            numWidget:
              type: integer
              format: int32
            onlineInstance:
              type: boolean
            position:
              type: integer
              format: int32
            references:
              type: object
              additionalProperties:
                type: boolean
            token:
              type: string
    shortDumpReport:
      title: Short dump report
      type: object
      properties:
        code:
          type: string
        date:
          type: string
        requiredTime:
          type: integer
          format: int64
    smtpServer:
      title: SMTP server
      type: object
      properties:
        active:
          type: boolean
        checkServerIdentity:
          type: boolean
        debugMode:
          type: boolean
        host:
          type: string
        password:
          type: string
        port:
          type: integer
          format: int32
        protocol:
          type: string
        timeout:
          type: integer
          format: int32
        username:
          type: string
    tableDumpReport:
      title: Table dump report
      type: object
      properties:
        requiredTime:
          type: integer
          format: int64
        rows:
          type: integer
          format: int32
        tableName:
          type: string
    trashedResource:
      title: Trashed resource
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        description:
          type: string
        folderPath:
          type: string
        group:
          type: string
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        type:
          type: string
        updatedAt:
          type: string
          format: date-time
    type:
      title: Type
      type: object
      properties:
        typeName:
          type: string
    user:
      title: User
      type: object
      properties:
        accountNotExpired:
          type: boolean
        credentialsNotExpired:
          type: boolean
        lastLogin:
          type: string
        lastPasswordChange:
          type: string
        maxMonthsSinceLastAccess:
          type: integer
          format: int32
        maxMonthsSinceLastPasswordChange:
          type: integer
          format: int32
        profileAttributes:
          type: object
          properties: {}
        profileType:
          $ref: '#/components/schemas/profileType'
        registration:
          type: string
        status:
          type: string
        username:
          type: string
    userProfileType:
      title: User profile type
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityTypeAttribute'
        code:
          type: string
        name:
          type: string
        status:
          type: string
    view:
      title: View
      type: object
      properties:
        contentType:
          type: string
    widgetConfiguration:
      title: Widget configuration
      type: object
      properties:
        code:
          type: string
        config:
          type: object
          additionalProperties:
            type: object
            properties: {}
    widgetTypeRef:
      title: Widget type reference
      type: object
      properties:
        code:
          type: string
        title:
          type: string
    wildCardType:
      title: Wild card type
      type: object
      properties:
        lowerBounds:
          type: array
          items:
            $ref: '#/components/schemas/type'
        typeName:
          type: string
        upperBounds:
          type: array
          items:
            $ref: '#/components/schemas/type'
  responses:
    activityStream:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/activityStreamRecord'
    activityStreamRecord:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/activityStreamRecord'
    asset_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/asset'
    assets_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset'
    assetsList_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset'
    attributeType:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/attributeType'
    attributeType_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/attributeType'
    basicFileAttributeViewList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    $ref: '#/components/schemas/basicFileAttributeView'
    booleanMap:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapPayload'
              - properties:
                  payload:
                    additionalProperties:
                      type: boolean
    categoriesListMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayloadMapMetadata'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
    category:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/category'
    categoryMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/category'
    componentUsage:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/componentUsage'
    componentUsageObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/componentUsage'
    componentUsageEntities:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/componentUsageEntity'
    componentsList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/component'
    consumer:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/consumer'
    consumerObject:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumer'
    content:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/content'
    contentObject:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/content'
    contentMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/content'
    contentModel:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/contentModel'
    contentModels:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentModel'
    contentModelReferences:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentModelReference'
    contentSetting_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/contentSettings'
    contentTypeObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/contentType'
    contentTypesObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/contentType'
    contentVersions:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentVersion'
    contents:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsListMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayloadMapMetadata'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsStatus:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contentsStatus'
    dumpReport:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/dumpReport'
    emailSender:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/emailSender'
    emailSenders:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/emailSender'
    entity:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/entity'
    entityManager:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/entityManager'
    entityTypeAttributeFull:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/entityTypeAttributeFull'
    entityTypeAttributeFullList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/entityTypeAttributeFull'
    entityTypeAttributeFullList_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/entityTypeAttributeFull'
    entityTypesShort:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/entityTypeShort'
    entityTypesStatus:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/entityTypesStatus'
    entityTypesStatus_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/entityTypesStatus'
    fragment:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/fragment'
    fragmentsSmall:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/fragmentSmall'
    group:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/group'
    groups:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/group'
    iEntityModelDictionary:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/iEntityModelDictionary'
    label:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/label'
    labels:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/label'
    language:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/language'
    languages:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/language'
    modelAndViewObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/modelAndView'
    navigatorConfig:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/navigatorConfig'
    objectObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            type: object
    ok:
      description: OK
    page:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/page'
    pageMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/page'
    pageMapMetadata_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/page'
    pages:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/page'
    pagesList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/page'
    pagesListMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayloadMapMetadata'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/page'
    pagedRestResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pagedRestResponse'
    pageConfiguration:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/pageConfiguration'
    pageModel:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/pageModel'
    pageModels:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/pageModel'
    pageStatus:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/pageStatus'
    permissions:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/permission'
    responseEntityObject_octet:
      description: OK
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/responseEntity'
    restResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponse_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponseMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponseMapMetadata'
    restResponseMapPayload_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/restResponseMapPayload'
    restResponseMapPayload:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponseMapPayload'
    role:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/role'
    roles:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/role'
    seoPageFull:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/seoPageFull'
    shortDumpReports:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/shortDumpReport'
    smtpServer:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/smtpServer'
    string_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: string
    strings:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    strings_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    stringsList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    stringsList_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    trashedResources_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/trashedResource'
    trashedResourceObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/trashedResource'
    userProfileType:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/userProfileType'
    users:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
    widgetConfiguration:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/widgetConfiguration'
    widgetConfigurationList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/widgetConfiguration'
    wildCardType_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/wildCardType'
    badRequest:
      description: Bad request
    conflict:
      description: Conflict
    assets_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset'
    assetsList_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset'
    contentObject-created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/content'
    contentTypeObject_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/contentType'
    contentVersions-created:
      description: Created
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentVersion'
    created:
      description: Created
    responseEntityObject_octet-created:
      description: OK
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/responseEntity'
    restResponse-created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponse_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/restResponse'
    string_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: string
    stringsList_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    trashedResources_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/trashedResource'
    trashedResourceObject_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/trashedResource'
    wildCardType_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/wildCardType'
    forbidden:
      description: Forbidden
    noContent:
      description: No content
    restResponse-noContent:
      description: No content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponse'
    notFound:
      description: Not found
    serverError:
      description: Server error
    unauthorized:
      description: Unauthorized
  parameters:
    accessToken:
      name: accessToken
      in: query
      description: ''
      schema:
        type: string
    accountNotExpired:
      name: accountNotExpired
      in: query
      description: ''
      schema:
        type: boolean
    activityStreamRecordId:
      name: recordId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int32
    activityStreamRecordCommentId:
      name: commentId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int32
    allowedValues:
      name: 'filters[0].allowedValues'
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    assetsFolderPath:
      name: folderPath
      in: query
      description: ''
      schema:
        type: string
    assetMetadata:
      name: metadata
      in: query
      description: ''
      required: true
      schema:
        type: string
    assetType:
      name: type
      in: query
      description: ''
      schema:
        type: string
    attribute:
      name: 'filters[0].attribute'
      in: query
      description: ''
      schema:
        type: string
    attributeId:
      name: attributeId
      in: path
      description: Attribute code
      required: true
      schema:
        type: string
    attributeTypeId:
      name: attributeTypeId
      in: path
      description: Attribute type code
      required: true
      schema:
        type: string
    authorizationAuthority:
      name: 'authorizations[0].authority'
      in: query
      description: ''
      schema:
        type: string
    authorizationGroupAuthority:
      name: 'authorizations[0].group.authority'
      in: query
      description: ''
      schema:
        type: string
    authorizationGroupDescr:
      name: 'authorizations[0].group.descr'
      in: query
      description: ''
      schema:
        type: string
    authorizationGroupDescription:
      name: 'authorizations[0].group.description'
      in: query
      description: ''
      schema:
        type: string
    authorizationGroupEntandoGroup:
      name: 'authorizations[0].group.entandoGroup'
      in: query
      description: ''
      schema:
        type: boolean
    authorizationGroupJapsGroup:
      name: 'authorizations[0].group.japsGroup'
      in: query
      description: ''
      schema:
        type: boolean
    authorizationGroupName:
      name: 'authorizations[0].group.name'
      in: query
      description: ''
      schema:
        type: string
    authorizationRoleAuthority:
      name: 'authorizations[0].role.authority'
      in: query
      description: ''
      schema:
        type: string
    authorizationRoleDescription:
      name: 'authorizations[0].role.description'
      in: query
      description: ''
      schema:
        type: string
    authorizationRoleName:
      name: 'authorizations[0].role.name'
      in: query
      description: ''
      schema:
        type: string
    authorizationRolePermissions:
      name: 'authorizations[0].role.permissions'
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    categories:
      name: categories
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    categoriesParentCode:
      name: parentCode
      in: query
      description: ''
      schema:
        type: string
        default: home
    categoryId:
      name: categoryId
      in: path
      description: Category code
      required: true
      schema:
        type: string
    categoryReferenceHolder:
      name: categoryReferenceHolder
      in: path
      description: Category references holder
      required: true
      schema:
        type: string
    complete:
      name: complete
      in: query
      description: ''
      schema:
        type: boolean
    consumerId:
      name: consumerId
      in: path
      description: Consumer key
      required: true
      schema:
        type: string
    contentId:
      name: contentId
      in: path
      description: Content code
      required: true
      schema:
        type: string
    contentLang:
      name: lang
      in: query
      description: ''
      schema:
        type: string
    contentModel:
      name: model
      in: query
      description: ''
      schema:
        type: string
    contentModelId:
      name: modelId
      in: path
      description: Content model id
      required: true
      schema:
        type: string
    contentStatus:
      name: status
      in: query
      description: ''
      schema:
        type: string
    contentTypeId:
      name: contentTypeId
      in: path
      description: Content type code
      required: true
      schema:
        type: string
    currentPath:
      name: currentPath
      in: query
      description: ''
      schema:
        type: string
    credentialsNotExpired:
      name: credentialsNotExpired
      in: query
      description: ''
      schema:
        type: boolean
    dataSource:
      name: dataSource
      in: path
      description: ''
      required: true
      schema:
        type: string
    direction:
      name: direction
      in: query
      description: ''
      schema:
        type: string
    disabled:
      name: disabled
      in: query
      description: ''
      schema:
        type: boolean
    entandoUser:
      name: entandoUser
      in: query
      description: ''
      schema:
        type: boolean
    entityAttr:
      name: 'filters[0].entityAttr'
      in: query
      description: ''
      schema:
        type: string
    entityManagerId:
      name: entityManagerId
      in: path
      description: Entity manager code
      required: true
      schema:
        type: string
    forLinkingToExtraGroups:
      name: forLinkingToExtraGroups
      in: query
      description: ''
      schema:
        type: string
    forLinkingToOwnerGroup:
      name: forLinkingToOwnerGroup
      in: query
      description: ''
      schema:
        type: string
    forLinkingWithExtraGroups:
      name: forLinkingWithExtraGroups
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    forLinkingWithOwnerGroup:
      name: forLinkingWithOwnerGroup
      in: query
      description: ''
      schema:
        type: string
    fragmentId:
      name: fragmentId
      in: path
      description: Fragment code
      required: true
      schema:
        type: string
    frameId:
      name: frameId
      in: path
      description: ''
      required: true
      schema:
        type: string
    groupId:
      name: groupId
      in: path
      description: Group code
      required: true
      schema:
        type: string
    groupName:
      name: groupName
      in: path
      description: ''
      required: true
      schema:
        type: string
    groupReferenceHolder:
      name: groupReferenceHolder
      in: path
      description: Group references holder
      required: true
      schema:
        type: string
    japsUser:
      name: japsUser
      in: query
      description: ''
      schema:
        type: boolean
    key:
      name: key
      in: path
      description: ''
      required: true
      schema:
        type: string
    labelId:
      name: labelId
      in: path
      description: Label code
      required: true
      schema:
        type: string
    languageId:
      name: languageId
      in: path
      description: Language code
      required: true
      schema:
        type: string
    mode:
      name: mode
      in: query
      description: |
        Two value allowed:
          * list: light version
          * full: brings extra data in the content
      schema:
        type: string
        default: full
        enum:
          - list
          - full
    model:
      name: model
      in: query
      description: ''
      schema:
        type: object
    modelId:
      name: modelId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int64
    name:
      name: name
      in: query
      description: ''
      schema:
        type: string
    operator:
      name: 'filters[0].operator'
      in: query
      description: ''
      schema:
        type: string
    orClauseCategoryFilter:
      name: orClauseCategoryFilter
      in: query
      description: ''
      schema:
        type: boolean
    order:
      name: 'filters[0].order'
      in: query
      description: ''
      schema:
        type: string
    page:
      name: page
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    pageId:
      name: pageId
      in: path
      description: Page code
      required: true
      schema:
        type: string
    pageCodeToken:
      name: pageCodeToken
      in: query
      description: ''
      schema:
        type: string
    pageModelId:
      name: pageModelId
      in: path
      description: Code
      required: true
      schema:
        type: string
    pageModelReferencesManager:
      name: pageModelReferencesManager
      in: path
      description: Manager
      required: true
      schema:
        type: string
    pageSize:
      name: pageSize
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    pagesParentCode:
      name: parentCode
      in: query
      description: ''
      schema:
        type: string
        default: homepage
    pageReferencesManager:
      name: pageReferencesManager
      in: path
      description: Manager
      required: true
      schema:
        type: string
    parameters:
      name: parameters
      in: query
      description: ''
      required: true
      schema: {}
    password:
      name: password
      in: query
      description: ''
      schema:
        type: string
    profile:
      name: profile
      in: query
      description: ''
      schema:
        type: object
    profileTypeId:
      name: profileTypeId
      in: path
      description: Profile type code
      required: true
      schema:
        type: string
    protectedFolder:
      name: protectedFolder
      in: query
      description: ''
      schema:
        type: boolean
    ratio:
      name: ratio
      in: path
      description: ''
      required: true
      schema:
        type: string
    refreshToken:
      name: refreshToken
      in: query
      description: ''
      schema:
        type: string
    reportId:
      name: reportId
      in: path
      description: Report code
      required: true
      schema:
        type: string
    requestParams:
      name: requestParams
      in: query
      description: ''
      required: true
      schema: {}
    resolveLink:
      name: resolveLink
      in: query
      description: ''
      schema:
        type: boolean
    resolveLinks:
      name: resolveLinks
      in: query
      description: ''
      schema:
        type: boolean
        default: false
    resourceId:
      name: resourceId
      in: path
      description: ''
      required: true
      schema:
        type: string
    resourcesTypeCode:
      name: resourceTypeCode
      in: query
      description: ''
      required: true
      schema:
        type: string
    roleId:
      name: roleId
      in: path
      description: Role code
      required: true
      schema:
        type: string
    senderId:
      name: senderId
      in: path
      description: Sender code
      required: true
      schema:
        type: string
    seoPageId:
      name: seoPageId
      in: path
      description: Page code
      required: true
      schema:
        type: string
    size:
      name: size
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int32
    sort:
      name: sort
      in: query
      description: ''
      schema:
        type: string
    status:
      name: status
      in: query
      description: ''
      schema:
        type: string
        default: draft
    tableName:
      name: tableName
      in: path
      description: ''
      required: true
      schema:
        type: string
    text:
      name: text
      in: query
      description: ''
      schema:
        type: string
    title:
      name: title
      in: query
      description: ''
      schema:
        type: string
    token:
      name: token
      in: query
      description: ''
      required: true
      schema:
        type: string
    type:
      name: 'filters[0].type'
      in: query
      description: ''
      schema:
        type: string
    typeCode:
      name: typeCode
      in: query
      description: ''
      schema:
        type: string
    username:
      name: username
      in: query
      description: ''
      schema:
        type: string
    userId:
      name: userId
      in: path
      description: Username
      required: true
      schema:
        type: string
    value:
      name: 'filters[0].value'
      in: query
      description: ''
      schema:
        type: string
    versionId:
      name: versionId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int64
  examples: {}
  requestBodies:
    activityStreamRecordComment:
      description: Activity stream record comment
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
              recordId:
                type: integer
                format: int32
    asset:
      description: Asset
      required: true
      content:
        multipart/form-data:
          schema:
            required:
              - file
            properties:
              file:
                type: string
                description: file
                format: binary
    assetWithMetadata:
      description: Asset with metadata
      required: true
      content:
        multipart/form-data:
          schema:
            required:
              - metadata
            properties:
              file:
                type: string
                description: file
                format: binary
              metadata:
                type: string
                description: metadata
    batchContentStatus:
      description: Batch content status
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              codes:
                type: array
                items:
                  type: string
              status:
                type: string
    category:
      description: Category
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/category'
    consumer:
      description: Consumer
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumer'
    content:
      description: Content
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/content'
    contentModel:
      description: Content model
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contentModel'
    contentSettingsCropRatio:
      description: Content settings crop ratio
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              ratio:
                type: string
    contentSettingsEditor:
      description: Content settings editor
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
                enum:
                  - none
                  - fckeditor
    contentSettingsMetadata:
      description: Content settings metadata
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
              mapping:
                type: string
    contentSettingsMetadataForUpdate:
      description: Content settings metadata for update
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mapping:
                type: string
    contentStatus:
      description: Content status
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    contentType:
      description: Content type
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/contentType'
              - properties:
                  attributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/entityTypeAttributeFull'
    contentTypeRefresh:
      description: Content type refresh
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              profileTypeCodes:
                type: array
                items:
                  type: string
    contentsCodes:
      description: Contents codes
      required: true
      content:
        '*/*':
          schema:
            type: array
            items:
              type: string
    contentsList:
      description: Contents list
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/content'
    directory:
      description: Directory
      required: true
      content:
        application/json:
          schema:
            properties:
              path:
                type: string
              protectedFolder:
                type: boolean
    emailSender:
      description: E-mail sender
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/emailSender'
    entity:
      description: Entity
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entity'
    entityTypeAttribute:
      description: Entity type attribute
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entityTypeAttributeFull'
    file:
      description: File
      required: true
      content:
        application/json:
          schema:
            properties:
              base64:
                type: string
                format: byte
                pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
              filename:
                type: string
              path:
                type: string
              protectedFolder:
                type: boolean
    fragment:
      description: Fragment
      required: true
      content:
        application/json:
          schema:
            properties:
              code:
                type: string
              guiCode:
                type: string
    fragmentGUICode:
      description: Fragment GUI code
      required: true
      content:
        application/json:
          schema:
            properties:
              guiCode:
                type: string
    fragmentsSettings:
      description: Fragments settings
      required: true
      content:
        application/json:
          schema:
            properties:
              enableEditingWhenEmptyDefaultGui:
                type: boolean
    group:
      description: Group
      required: true
      content:
        application/json:
          schema:
            properties:
              code:
                type: string
              name:
                type: string
    idCodesByObjectType:
      description: ID codes by object type
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
    jsonMap:
      description: JSON map
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: string
    jsonNode:
      description: JSON node
      required: true
      content:
        application/json-patch+json:
          schema:
            type: object
    label:
      description: Label
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/label'
    language:
      description: Language
      required: true
      content:
        application/json:
          schema:
            properties:
              isActive:
                type: boolean
    navigatorConfig:
      description: Navigator config
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/navigatorConfig'
    page:
      description: Page
      required: true
      content:
        application/json:
          schema:
            properties:
              charset:
                type: string
              code:
                type: string
              contentType:
                type: string
              displayedInMenu:
                type: boolean
              joinGroups:
                type: array
                items:
                  type: string
              ownerGroup:
                type: string
              pageModel:
                type: string
              parentCode:
                type: string
              seo:
                type: boolean
              status:
                type: string
              titles:
                type: object
                additionalProperties:
                  type: string
    pageClone:
      description: Page clone
      required: true
      content:
        application/json:
          schema:
            properties:
              newPageCode:
                type: string
              parentCode:
                type: string
              titles:
                type: object
                additionalProperties:
                  type: string
    pageModel:
      description: Page model
      required: true
      content:
        application/json:
          schema:
            properties:
              code:
                type: string
              configuration:
                $ref: '#/components/schemas/pageModelConfiguration'
              descr:
                type: string
              pluginCode:
                type: string
              template:
                type: string
    pagePosition:
      description: Page position
      required: true
      content:
        application/json:
          schema:
            properties:
              code:
                type: string
              parentCode:
                type: string
              position:
                type: integer
                format: int32
    pageStatus:
      description: Page status
      required: true
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
    profileType:
      description: Profile type
      required: true
      content:
        application/json:
          schema:
            properties:
              attributes:
                type: array
                items:
                  $ref: '#/components/schemas/entityTypeAttributeFull'
              code:
                type: string
              name:
                type: string
              status:
                type: string
    profileTypeRefreshStatus:
      description: Profile type refresh status
      required: true
      content:
        application/json:
          schema:
            properties:
              profileTypeCodes:
                type: array
                items:
                  type: string
    role:
      description: Role
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
    seoPage:
      description: SEO page
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/seoPage'
    smtpServer:
      description: SMTP server
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/smtpServer'
    widgetConfiguration:
      description: Widget config
      required: true
      content:
        application/json:
          schema:
            properties:
              code:
                type: string
              config:
                type: object
                properties: {}
  headers: {}
  securitySchemes:
    entando:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/realms/entando/protocol/openid-connect/auth
          tokenUrl: /auth/realms/entando/protocol/openid-connect/token
          scopes: {}
  links: {}
  callbacks: {}
security:
  - entando: []
tags:
  - name: activity-stream-controller
    description: Activity stream operations
  - name: analysis-controller
    description: Analysis operations
  - name: analysis-controller-cms
    description: CMS analysis operations
  - name: authorization-endpoint
    description: Authorization operations
  - name: category-controller
    description: Categories operations
  - name: check-token-endpoint
    description: Check token operations
  - name: consumers
    description: Consumers operations
  - name: content-controller
    description: Contents operations
  - name: content-model-controller
    description: Content models operations
  - name: content-settings-controller
    description: Content settings operations
  - name: content-type-resource-controller
    description: Content type resource operations
  - name: content-versioning-controller
    description: Content versioning operations
  - name: dashboard-controller
    description: Dashboard operations
  - name: database-controller
    description: Database operations
  - name: email-sender-controller
    description: Email sender operations
  - name: entity-manager-controller
    description: Entity manager operations
  - name: file-browser-controller
    description: File browser operations
  - name: group-controller
    description: Group operations
  - name: gui-fragment-controller
    description: GUI fragments operations
  - name: gui-fragment-settings-controller
    description: GUI fragments settings operations
  - name: health-controller
    description: Health operations
  - name: label-controller
    description: Labels operations
  - name: language-controller
    description: Languages operations
  - name: navigator-widget-config-controller
    description: Widget navigator config operations
  - name: page-configuration-controller
    description: Page configuration operations
  - name: page-controller
    description: Page operations
  - name: page-models
    description: Page models operations
  - name: page-settings-controller
    description: Page settings operations
  - name: permission-controller
    description: Permissions operations
  - name: profile-controller
    description: Profile operations
  - name: profile-type-controller
    description: Profile type operations
  - name: reload-configuration-controller
    description: Reload configuration operations
  - name: resource-versioning-controller
    description: Resource versioning operations
  - name: resources-controller
    description: Resources operations
  - name: role-controller
    description: Role operations
  - name: seo-page-controller
    description: SEO pages operations
  - name: smtp-server-configuration-controller
    description: SMTP server configuration operations
  - name: system-controller
    description: System operations
externalDocs:
  description: ''
  url: 'https://'