openapi: 3.0.0
info:
  title: Entando Core APIs
  description: Entando Core APIs
  termsOfService: 'https://'
  contact:
    name: Walter Caffiero
    url: 'https://'
    email: w.caffiero@entando.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 7.0.0
servers:
  - url: /entando-de-app/api
    description: Entando 7.0 API base path
paths:
  /activityStream:
    summary: Activity stream operations
    description: End-point to access and manipulate the activity stream
    get:
      tags:
        - activity-stream-controller
      summary: Retrieve the activity stream
      description: Retrieve the activity stream's records filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getActivityStream
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/activityStream'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/activityStream/{recordId}/comments':
    summary: Activity stream record's comments collection operations
    description: End-point to access and manipulate the activity stream record's comments collection
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
    post:
      tags:
        - activity-stream-controller
      summary: Add a comment to an activity stream record
      description: Add the comment to the activity stream record specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addComment
      requestBody:
        $ref: '#/components/requestBodies/activityStreamRecordComment'
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/activityStream/{recordId}/comments/{commentId}':
    summary: Activity stream record's comment operations
    description: End-point to access and manipulate an activity stream record's comment
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
      - $ref: '#/components/parameters/activityStreamRecordCommentId'
    delete:
      tags:
        - activity-stream-controller
      summary: Remove a comment from the activity stream record
      description: Remove the comment from the activity stream record as specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: removeComment
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/activityStream/{recordId}/like':
    summary: Activity stream record's likes collection operations
    description: End-point to access and manipulate the activity stream record's likes collection
    parameters:
      - $ref: '#/components/parameters/activityStreamRecordId'
    post:
      tags:
        - activity-stream-controller
      summary: Add a like to an activity stream record
      description: Add a like to the activity stream record specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addLike
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - activity-stream-controller
      summary: Remove a like from an activity stream record
      description: Remove a like from the activity stream record specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: removeLike
      responses:
        '200':
          $ref: '#/components/responses/activityStreamRecord'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /analysis/cms/components/diff:
    summary: CMS components analysis operations
    description: API to perform analysis on CMS components
    post:
      tags:
        - analysis-controller-cms
      summary: Run the CMS component existence analysis
      description: Perform the analysis on the existnce of the CMS components
      externalDocs:
        description: ''
        url: 'https://'
      operationId: runCMSComponentExistenceAnalysis
      requestBody:
        $ref: '#/components/requestBodies/idCodesByObjectType'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /analysis/components/diff:
    summary: Components analysis operations
    description: API to perform analysis on components
    post:
      tags:
        - analysis-controller
      summary: Run the component existence analysis
      description: Perform the analysis on the existnce of the components
      externalDocs:
        description: ''
        url: 'https://'
      operationId: runComponentExistenceAnalysis
      requestBody:
        $ref: '#/components/requestBodies/idCodesByObjectType'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /categories:
    summary: Categories operations
    description: API to access and manipulate the collection of categories
    get:
      tags:
        - category-controller
      summary: Retrieve the collection of categories
      description: Retrieve the collection of categories filtered by parent code
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategories
      parameters:
        - $ref: '#/components/parameters/categoriesParentCode'
      responses:
        '200':
          $ref: '#/components/responses/categoriesListMapMetadata'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - category-controller
      summary: Add a category to the categories collection
      description: Create a new category as specified in the request body and add it to the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addCategory
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/category'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/categories/{categoryId}':
    summary: Category operations
    description: API to access and manipulate a category
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      tags:
        - category-controller
      summary: Retrieve a category
      description: Retrieve the category specified in the path from the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategory
      responses:
        '200':
          $ref: '#/components/responses/category'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - category-controller
      summary: Update a category
      description: Update the category specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateCategory
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/categoryMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - category-controller
      summary: Delete a category
      description: Delete the category specified in the path from the categories collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteCategory
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/categories/{categoryId}/references/{categoryReferenceHolder}':
    summary: Category references operations
    description: API to access and manipulate the category references
    parameters:
      - $ref: '#/components/parameters/categoryId'
      - $ref: '#/components/parameters/categoryReferenceHolder'
    get:
      tags:
        - category-controller
      summary: Retrieve the category references
      description: Retrieve the category references for the category specified in the path by holder
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategoryReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/pagedRestResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/categories/{categoryId}/usage':
    summary: Category usage operations
    description: API to access and manipulate a category usage
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      tags:
        - category-controller
      summary: Retrieve the category usage
      description: Retrieve the usage of the category specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getCategoryUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /consumers:
    summary: Consumers operations
    description: API to access and manipulate the collection of consumers
    get:
      tags:
        - consumers
      summary: Retrieve the collection of consumers
      description: Retrieve the collection of consumers filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getConsumers
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/consumerObject'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - consumers
      summary: Add a consumer to the consumers collection
      description: Create a new consumer as specified in the request body and add it to the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createConsumer
      requestBody:
        $ref: '#/components/requestBodies/consumer'
      responses:
        '200':
          $ref: '#/components/responses/consumerObject'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/consumers/{consumerId}':
    summary: Consumer operations
    description: API to access and manipulate a consumer
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      tags:
        - consumers
      summary: Retrieve a consumer
      description: Retrieve the consumer specified in the path from the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getConsumer
      responses:
        '200':
          $ref: '#/components/responses/consumer'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - consumers
      summary: Update a consumer
      description: Update the consumer specified in the path as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateConsumer
      requestBody:
        $ref: '#/components/requestBodies/consumer'
      responses:
        '200':
          $ref: '#/components/responses/consumer'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - consumers
      summary: Delete a consumer
      description: Delete the consumer specified in the path from the consumers collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteConsumer
      responses:
        '200':
          $ref: '#/components/responses/ok'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /oauth/authorize:
    summary: Authorization operations
    description: API to handle authorizations
    get:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via GET
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeGET
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via PUT
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePUT
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via POST
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePOST
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via DELETE
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeDELETE
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    options:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via OPTIONS
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeOPTIONS
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    head:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via HEAD
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizeHEAD
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
    patch:
      tags:
        - authorization-endpoint
      summary: Authorize
      description: Authorize via PATCH
      externalDocs:
        description: ''
        url: 'https://'
      operationId: authorizePATCH
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/complete'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/parameters'
      responses:
        '200':
          $ref: '#/components/responses/modelAndViewObject_generic'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /oauth/check_token:
    summary: Check token operations
    description: API to handle token checks
    post:
      tags:
        - check-token-endpoint
      summary: Check token
      description: Check token via POST
      externalDocs:
        description: ''
        url: 'https://'
      operationId: checkToken
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          $ref: '#/components/responses/objectObject_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentmodels:
    summary: Content Models operations
    description: API to access and manipulate the collection of content models
    get:
      tags:
        - content-model-controller
      summary: Retrieve the collection of content models
      description: Retrieve the collection of content models filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModels
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentModels'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    post:
      tags:
        - content-model-controller
      summary: Add a content model to the content models collection
      description: Create a new content model as specified in the request body and add it to the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addContentModel
      requestBody:
        $ref: '#/components/requestBodies/contentModel'
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/cms/contentmodels/dictionary:
    summary: Content models dictionary operations
    description: API to access and manipulate the dictionary of content models
    get:
      tags:
        - content-model-controller
      summary: Retrieve the dictionary of content models
      description: Retrieve the dictionary of content models containing *velocity* instructions for the editor
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelsDictionary
      parameters:
        - $ref: '#/components/parameters/typeCode'
      responses:
        '200':
          $ref: '#/components/responses/iEntityModelDictionary'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}':
    summary: Content model operations
    description: API to access and manipulate a content model
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model
      description: Retrieve the content model specified in the path from the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModel
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    put:
      tags:
        - content-model-controller
      summary: Update a content model
      description: Update the content model specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentModel
      requestBody:
        $ref: '#/components/requestBodies/contentModel'
      responses:
        '200':
          $ref: '#/components/responses/contentModel'
        '201':
          $ref: '#/components/responses/created'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
    delete:
      tags:
        - content-model-controller
      summary: Delete a content model
      description: Delete the content model specified in the path from the content models collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContentModel
      responses:
        '200':
          $ref: '#/components/responses/restResponseMapPayload'
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/pagereferences':
    summary: Content model references operations
    description: API to access and manipulate a content model references
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model references
      description: Retrieve the page (and widget) references for the content model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelReferences
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentModelReferences'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/usage':
    summary: Content model usage operations
    description: API to access and manipulate a content model usage
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model usage
      description: Retrieve the usage count for the content model specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelUsage
      responses:
        '200':
          $ref: '#/components/responses/componentUsage'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  '/plugins/cms/contentmodels/{modelId}/usage/details':
    summary: Content model usage details operations
    description: API to access and manipulate a content model usage details
    parameters:
      - $ref: '#/components/parameters/modelId'
    get:
      tags:
        - content-model-controller
      summary: Retrieve a content model usage details
      description: Retrieve the usage details for the content model specified in the path filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentModelUsageDetails
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/componentUsageEntities'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '500':
          $ref: '#/components/responses/serverError'
  /plugins/cms/contentSettings:
    summary: Content settings operations
    description: API to access and manipulate the collection of content settings
    get:
      tags:
        - content-settings-controller
      summary: Retrieve the collection of content settings
      description: Retrieve the collection of content settings
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentSettings
      responses:
        '200':
          $ref: '#/components/responses/contentSetting_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/cropRatios:
    summary: Content settings crop ratios operations
    description: API to access and manipulate the collection of content settings crop ratios
    post:
      tags:
        - content-settings-controller
      summary: Add a content settings crop ratio
      description: Create a new content settings crop ratio as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createCropRatio
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsCropRatio'
      responses:
        '200':
          $ref: '#/components/responses/stringsList_generic'
        '201':
          $ref: '#/components/responses/stringsList_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentSettings/cropRatios/{ratio}':
    summary: Content settings crop ratio operations
    description: API to access and manipulate a content settings crop ratio
    parameters:
      - $ref: '#/components/parameters/ratio'
    put:
      tags:
        - content-settings-controller
      summary: Update a content settings crop ratio
      description: Update the content settings crop ratio specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: editCropRatio
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsCropRatio'
      responses:
        '200':
          $ref: '#/components/responses/stringsList_generic'
        '201':
          $ref: '#/components/responses/stringsList_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-settings-controller
      summary: Delete a content settings crop ratio
      description: Delete the content settings crop ratio specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteCropRatio
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '201':
          $ref: '#/components/responses/restResponse-created'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contentSettings/editor:
    summary: Content settings editors operations
    description: API to access and manipulate the collection of content settings editors
    put:
      tags:
        - content-settings-controller
      summary: Set the content settings editor
      description: Set the content settings editor as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: setEditor
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsEditor'
      responses:
        '200':
          $ref: '#/components/responses/string_generic'
        '201':
          $ref: '#/components/responses/string_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/metadata:
    summary: Content settings metadata operations
    description: API to access and manipulate the collection of content settings metadata
    post:
      tags:
        - content-settings-controller
      summary: Add content settings metadata
      description: Create new content settings metadata as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createMetadata
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsMetadata'
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentSettings/metadata/{key}':
    summary: Content settings metadata operations
    description: API to access and manipulate a content settings metadata
    parameters:
      - $ref: '#/components/parameters/key'
    put:
      tags:
        - content-settings-controller
      summary: Update a content settings metadata
      description: Update the content settings metadata specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: editMetadata
      requestBody:
        $ref: '#/components/requestBodies/contentSettingsMetadataForUpdate'
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-settings-controller
      summary: Delete a content settings metadata
      description: Delete the content settings metadata specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteMetadata
      responses:
        '200':
          $ref: '#/components/responses/wildCardType_generic'
        '201':
          $ref: '#/components/responses/wildCardType_generic-created'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contentSettings/reloadIndexes:
    summary: Content settings reload indexes operations
    description: API to perform a reload of the content settings indexes
    post:
      tags:
        - content-settings-controller
      summary: Reload the content settings indexes
      description: Reload the content settings indexes
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadIndexes
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/restResponse_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentSettings/reloadReferences:
    summary: Content settings reload references operations
    description: API to perform a reload of the content settings references
    post:
      tags:
        - content-settings-controller
      summary: Reload the content settings references
      description: Reload the content settings references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadContentSettingsReferences
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/restResponse_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentTypeAttributes:
    summary: Content type attributes operations
    description: API to access and manipulate the collection of content type attributes
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve the collection of content type attribute types
      description: Retrieve the collection of content type attribute types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributeTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/strings_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypeAttributes/{attributeTypeId}':
    summary: Content type attribute operations
    description: API to access and manipulate a content type attribute
    parameters:
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attribute type
      description: Retrieve a content type attribute type
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributeType
      responses:
        '200':
          $ref: '#/components/responses/attributeType_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypeAttributes/{contentTypeId}/attribute/{attributeTypeId}':
    summary: Content type attributes content attribute operations
    description: API to access and manipulate a content type attributes content attribute
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
      - $ref: '#/components/parameters/attributeTypeId'
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve a content type attributes content attribute
      description: Retrieve a content type attributes content attribute
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypeAttributesContentAttribute
      responses:
        '200':
          $ref: '#/components/responses/attributeType_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  /plugins/cms/contentTypes:
    summary: Content types operations
    description: API to access and manipulate the collection of content types
    get:
      tags:
        - content-type-resource-controller
      summary: Retrieve the collection of content types
      description: Retrieve the collection of content types filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentTypes
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/contentTypesObject_generic'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-type-resource-controller
      summary: Update content type
      description: Update a content type as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentType
      requestBody:
        $ref: '#/components/requestBodies/contentType'
      responses:
        '200':
          $ref: '#/components/responses/contentTypeObject_generic'
        '201':
          $ref: '#/components/responses/contentTypeObject_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-type-resource-controller
      summary: Create a content type
      description: Create a new content type as specified in the request body and add it to the content types collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: createContentType
      requestBody:
        $ref: '#/components/requestBodies/contentType'
      responses:
        '200':
          $ref: '#/components/responses/contentTypeObject_generic'
        '201':
          $ref: '#/components/responses/contentTypeObject_generic-created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/refresh/{contentTypeId}':
    summary: Content typess refresh references operations
    description: API to perform a refresh of the content types references
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
    post:
      tags:
        - content-type-resource-controller
      summary: Reload a content type references
      description: Reload a content type references
      externalDocs:
        description: ''
        url: 'https://'
      operationId: reloadContentTypeReferences
      responses:
        '200':
          $ref: '#/components/responses/restResponse_generic'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contentTypes/{contentTypeId}':
    summary: Content type operations
    description: API to access and manipulate a content type
    parameters:
      - $ref: '#/components/parameters/contentTypeId'
  /plugins/cms/contents:
    summary: Contents operations
    description: API to access and manipulate the collection of contents
    get:
      tags:
        - content-controller
      summary: Retrieve the collection of contents
      description: Retrieve the collection of contents filtered by query parameters
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContents
      parameters:
        - $ref: '#/components/parameters/allowedValues'
        - $ref: '#/components/parameters/attribute'
        - $ref: '#/components/parameters/entityAttr'
        - $ref: '#/components/parameters/operator'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/value'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/forLinkingWithExtraGroups'
        - $ref: '#/components/parameters/forLinkingWithOwnerGroup'
        - $ref: '#/components/parameters/mode'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/contentModel'
        - $ref: '#/components/parameters/orClauseCategoryFilter'
        - $ref: '#/components/parameters/resolveLink'
        - $ref: '#/components/parameters/contentStatus'
        - $ref: '#/components/parameters/text'
      responses:
        '200':
          $ref: '#/components/responses/contents'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update contents
      description: Update the contents collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContents
      requestBody:
        $ref: '#/components/requestBodies/contentsList'
      responses:
        '200':
          $ref: '#/components/responses/contentsList'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    post:
      tags:
        - content-controller
      summary: Add a content to the contents collection
      description: Create a new content as specified in the request body and add it to the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: addContent
      requestBody:
        $ref: '#/components/requestBodies/content'
      responses:
        '200':
          $ref: '#/components/responses/contentsList'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-controller
      summary: Delete contents
      description: Delete elements of the contents collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContents
      requestBody:
        $ref: '#/components/requestBodies/contentsCodes'
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  /plugins/cms/contents/status:
    summary: Contents status
    description: API to access and manipulate the collection of contents status
    get:
      tags:
        - content-controller
      summary: Retrieve the collection of contents status
      description: Retrieve the collection of contents status
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContentsStatus
      responses:
        '200':
          $ref: '#/components/responses/contentsStatus'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update contents status
      description: Update the contents status collection as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentsStatus
      requestBody:
        $ref: '#/components/requestBodies/batchContentStatus'
      responses:
        '200':
          $ref: '#/components/responses/contentsListMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}':
    summary: Content operations
    description: API to access and manipulate a content
    parameters:
      - $ref: '#/components/parameters/contentId'
    get:
      tags:
        - content-controller
      summary: Retrieve a content
      description: Retrieve the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getContent
      parameters:
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      tags:
        - content-controller
      summary: Update a content
      description: Update the content specified in the path as described in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContent
      requestBody:
        $ref: '#/components/requestBodies/content'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
    delete:
      tags:
        - content-controller
      summary: Delete a content
      description: Delete the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: deleteContent
      responses:
        '200':
          $ref: '#/components/responses/restResponse'
        '204':
          $ref: '#/components/responses/noContent'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
  '/plugins/cms/contents/{contentId}/clone':
    summary: Content clone operation
    description: API to clone a content
    parameters:
      - $ref: '#/components/parameters/contentId'
    post:
      tags:
        - content-controller
      summary: Clone a content
      description: Clone the content specified in the path
      externalDocs:
        description: ''
        url: 'https://'
      operationId: cloneContent
      responses:
        '200':
          $ref: '#/components/responses/content'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}/model/{modelId}':
    summary: Content clone operation
    description: API to clone a content
    parameters:
      - $ref: '#/components/parameters/contentId'
      - $ref: '#/components/parameters/contentModelId'
    get:
      tags:
        - content-controller
      summary: Retrieve a content
      description: Retrieve the content specified in the path from the contents collection
      externalDocs:
        description: ''
        url: 'https://'
      operationId: getModelOfTheContent
      parameters:
        - $ref: '#/components/parameters/contentLang'
        - $ref: '#/components/parameters/resolveLinks'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          $ref: '#/components/responses/content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
  '/plugins/cms/contents/{contentId}/status':
    summary: Content status operations
    description: API to access and manipulate a content status
    parameters:
      - $ref: '#/components/parameters/contentId'
    put:
      tags:
        - content-controller
      summary: Update content status
      description: Update the content status as specified in the request body
      externalDocs:
        description: ''
        url: 'https://'
      operationId: updateContentStatus
      requestBody:
        $ref: '#/components/requestBodies/contentStatus'
      responses:
        '200':
          $ref: '#/components/responses/contentMapMetadata'
        '201':
          $ref: '#/components/responses/created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
components:
  schemas:
    activityStreamRecord:
      title: Activity stream record
      type: object
      properties:
        actionName:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/activityStreamCommentInfo'
        createdAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        likes:
          type: array
          items:
            $ref: '#/components/schemas/activityStreamLikeInfo'
        namespace:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        updatedAt:
          type: string
          format: date-time
        username:
          type: string
    activityStreamCommentInfo:
      title: Activity stream record comment info
      type: object
      properties:
        commentDate:
          type: string
          format: date-time
        commentText:
          type: string
        displayName:
          type: string
        id:
          type: integer
          format: int32
        username:
          type: string
    activityStreamLikeInfo:
      title: Activity stream record like info
      type: object
      properties:
        displayName:
          type: string
        username:
          type: string
    attributeProperty:
      title: Attribute property
      type: object
      properties:
        code:
          type: string
        descr:
          type: string
    attributeType:
      title: Attribute type
      type: object
      properties:
        allowedDisablingCodes:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        allowedRoles:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        assignedRoles:
          type: object
          additionalProperties:
            type: string
        code:
          type: string
        dateFilterSupported:
          type: boolean
        enumeratorExtractorBeans:
          type: array
          items:
            type: string
        enumeratorMapExtractorBeans:
          type: array
          items:
            type: string
        enumeratorMapOptionsSupported:
          type: boolean
        enumeratorOptionsSupported:
          type: boolean
        indexableOptionSupported:
          type: boolean
        listAttribute:
          type: boolean
        multilingual:
          type: boolean
        numberFilterSupported:
          type: boolean
        searchableOptionSupported:
          type: boolean
        simple:
          type: boolean
        textAttribute:
          type: boolean
        textFilterSupported:
          type: boolean
    category:
      title: Category
      type: object
      properties:
        children:
          type: array
          items:
            type: string
        code:
          type: string
        fullTitles:
          type: object
          additionalProperties:
            type: string
        parentCode:
          type: string
        references:
          type: object
          additionalProperties:
            type: boolean
        titles:
          type: object
          additionalProperties:
            type: string
    componentUsage:
      title: Component usage
      type: object
      properties:
        code:
          type: string
        status:
          type: string
        type:
          type: string
        usage:
          type: integer
          format: int32
    componentUsageEntity:
      title: Component usage entity
      type: object
      properties:
        code:
          type: string
        status:
          type: string
        type:
          type: string
    consumer:
      title: Consumer
      type: object
      properties:
        authorizedGrantTypes:
          type: array
          items:
            type: string
        callbackUrl:
          type: string
        description:
          type: string
        expirationDate:
          type: string
        issuedDate:
          type: string
        key:
          type: string
        name:
          type: string
        scope:
          type: string
        secret:
          type: string
    content:
      title: Content
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        categories:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
        defaultModel:
          type: string
        description:
          type: string
        firstEditor:
          type: string
        groups:
          type: array
          items:
            type: string
        html:
          type: string
        id:
          type: string
        lastEditor:
          type: string
        lastModified:
          type: string
          format: date-time
        listModel:
          type: string
        mainGroup:
          type: string
        onLine:
          type: boolean
        references:
          type: object
          additionalProperties:
            type: boolean
        restriction:
          type: string
        status:
          type: string
        typeCode:
          type: string
        typeDescription:
          type: string
        version:
          type: string
        viewPage:
          type: string
    contentModel:
      title: Content model
      required:
        - id
        - descr
        - contentType
      type: object
      properties:
        contentShape:
          type: string
        contentType:
          type: string
          pattern: '[A-Z]{3}'
        descr:
          type: string
        id:
          type: integer
          format: int64
        stylesheet:
          type: string
    contentModelReference:
      title: Content model reference
      type: object
      properties:
        online:
          type: boolean
        pageCode:
          type: string
        widgetPosition:
          type: integer
          format: int32
    contentSettings:
      title: Content settings
      type: object
      properties:
        cropRatios:
          type: array
          items:
            type: string
        editor:
          type: string
          enum:
            - '{label=None, key=none}'
            - '{label=CKEditor, key=fckeditor}'
        indexesLastReload:
          $ref: '#/components/schemas/lastReloadInfo'
        indexesStatus:
          type: integer
          format: int32
        metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/wildCardType'
        referencesStatus:
          type: integer
          format: int32
    contentType:
      title: Content type
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/entityTypeAttribute'
        code:
          type: string
        defaultContentModel:
          type: string
        defaultContentModelList:
          type: string
        name:
          type: string
        status:
          type: string
        viewPage:
          type: string
    contentsStatus:
      title: Contents status
      type: object
      properties:
        latestModificationDate:
          type: string
          format: date-time
        published:
          type: integer
          format: int32
        ready:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        unpublished:
          type: integer
          format: int32
    entityAttribute:
      title: Entity attribute
      type: object
      properties:
        code:
          type: string
        compositeelements:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        elements:
          type: array
          items:
            $ref: '#/components/schemas/entityAttribute'
        listelements:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/entityAttribute'
        value:
          type: object
          properties: {}
        values:
          type: object
          properties: {}
    entityTypeAttribute:
      title: Entity type attribute
      type: object
      properties:
        code:
          type: string
        disablingCodes:
          type: array
          items:
            type: string
        listFilter:
          type: boolean
        mandatory:
          type: boolean
        name:
          type: string
        names:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/attributeProperty'
        type:
          type: string
    entityTypeAttributeFull:
      title: Entity type attribute full
      allOf:
        - $ref: '#/components/schemas/entityTypeAttribute'
        - type: object
          properties:
            compositeAttributes:
              type: array
              items:
                $ref: '#/components/schemas/entityTypeAttributeFull'
            enumeratorExtractorBean:
              type: string
            enumeratorStaticItems:
              type: string
            enumeratorStaticItemsSeparator:
              type: string
            indexable:
              type: boolean
            nestedAttribute:
              $ref: '#/components/schemas/entityTypeAttributeFull'
            validationRules:
              $ref: '#/components/schemas/entityTypeAttributeValidation'
    entityTypeAttributeOGNLValidation:
      title: Entity type attribute OGNL validation
      type: object
      properties:
        applyOnlyToFilledAttr:
          type: boolean
        errorMessage:
          type: string
        helpMessage:
          type: string
        keyForErrorMessage:
          type: string
        keyForHelpMessage:
          type: string
        ognlExpression:
          type: string
    entityTypeAttributeValidation:
      title: Entity type attribute validation
      type: object
      properties:
        equalDate:
          type: string
        equalDateAttribute:
          type: string
        equalNumber:
          type: integer
          format: int32
        equalNumberAttribute:
          type: string
        equalString:
          type: string
        equalStringAttribute:
          type: string
        maxLength:
          type: integer
          format: int32
        minLength:
          type: integer
          format: int32
        ognlValidation:
          $ref: '#/components/schemas/entityTypeAttributeOGNLValidation'
        rangeEndDate:
          type: string
        rangeEndDateAttribute:
          type: string
        rangeEndNumber:
          type: integer
          format: int32
        rangeEndNumberAttribute:
          type: string
        rangeEndString:
          type: string
        rangeEndStringAttribute:
          type: string
        rangeStartDate:
          type: string
        rangeStartDateAttribute:
          type: string
        rangeStartNumber:
          type: integer
          format: int32
        rangeStartNumberAttribute:
          type: string
        rangeStartString:
          type: string
        rangeStartStringAttribute:
          type: string
        regex:
          type: string
    filter:
      title: Filter
      type: object
      properties:
        attribute:
          type: string
        entityAttr:
          type: string
        operator:
          type: string
        order:
          type: string
        type:
          type: string
        value:
          type: string
        allowedValues:
          type: array
          items:
            type: string
    iEntityModelDictionary:
      title: IEntity model dictionary
      type: object
      properties:
        entityRootName:
          type: string
    lastReloadInfo:
      title: Last reload info
      type: object
      properties:
        date:
          type: string
          format: date-time
        result:
          type: integer
          format: int32
    modelAndView:
      title: Model and view
      type: object
      properties:
        empty:
          type: boolean
        model:
          type: object
          properties: {}
        modelMap:
          type: object
          additionalProperties:
            type: object
            properties: {}
        reference:
          type: boolean
        status:
          type: string
          enum:
            - CONTINUE
            - SWITCHING_PROTOCOLS
            - PROCESSING
            - CHECKPOINT
            - OK
            - CREATED
            - ACCEPTED
            - NON_AUTHORITATIVE_INFORMATION
            - NO_CONTENT
            - RESET_CONTENT
            - PARTIAL_CONTENT
            - MULTI_STATUS
            - ALREADY_REPORTED
            - IM_USED
            - MULTIPLE_CHOICES
            - MOVED_PERMANENTLY
            - FOUND
            - MOVED_TEMPORARILY
            - SEE_OTHER
            - NOT_MODIFIED
            - USE_PROXY
            - TEMPORARY_REDIRECT
            - PERMANENT_REDIRECT
            - BAD_REQUEST
            - UNAUTHORIZED
            - PAYMENT_REQUIRED
            - FORBIDDEN
            - NOT_FOUND
            - METHOD_NOT_ALLOWED
            - NOT_ACCEPTABLE
            - PROXY_AUTHENTICATION_REQUIRED
            - REQUEST_TIMEOUT
            - CONFLICT
            - GONE
            - LENGTH_REQUIRED
            - PRECONDITION_FAILED
            - PAYLOAD_TOO_LARGE
            - REQUEST_ENTITY_TOO_LARGE
            - URI_TOO_LONG
            - REQUEST_URI_TOO_LONG
            - UNSUPPORTED_MEDIA_TYPE
            - REQUESTED_RANGE_NOT_SATISFIABLE
            - EXPECTATION_FAILED
            - I_AM_A_TEAPOT
            - INSUFFICIENT_SPACE_ON_RESOURCE
            - METHOD_FAILURE
            - DESTINATION_LOCKED
            - UNPROCESSABLE_ENTITY
            - LOCKED
            - FAILED_DEPENDENCY
            - TOO_EARLY
            - UPGRADE_REQUIRED
            - PRECONDITION_REQUIRED
            - TOO_MANY_REQUESTS
            - REQUEST_HEADER_FIELDS_TOO_LARGE
            - UNAVAILABLE_FOR_LEGAL_REASONS
            - INTERNAL_SERVER_ERROR
            - NOT_IMPLEMENTED
            - BAD_GATEWAY
            - SERVICE_UNAVAILABLE
            - GATEWAY_TIMEOUT
            - HTTP_VERSION_NOT_SUPPORTED
            - VARIANT_ALSO_NEGOTIATES
            - INSUFFICIENT_STORAGE
            - LOOP_DETECTED
            - BANDWIDTH_LIMIT_EXCEEDED
            - NOT_EXTENDED
            - NETWORK_AUTHENTICATION_REQUIRED
        view:
          $ref: '#/components/schemas/view'
        viewName:
          type: string
    pagedRestResponse:
      title: Paged REST response
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseListPayload'
        - properties:
            metadata:
              $ref: '#/components/schemas/paginationMetadata'
    paginationMetadata:
      title: Pagination metadata
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        lastPage:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int32
        sort:
          type: string
        direction:
          type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/filter'
        additionalParams:
          type: object
          additionalProperties:
            type: string
    restError:
      title: REST error
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    restResponse:
      title: REST response
      type: object
      properties:
        payload:
          type: object
        metadata:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/restError'
    restResponseListPayload:
      title: REST response list payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: array
              items:
                type: object
    restResponseListPayloadMapMetadata:
      title: REST response list payload map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseMapMetadata'
        - $ref: '#/components/schemas/restResponseListPayload'
    restResponseMapMetadata:
      title: REST response map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            metadata:
              type: object
              additionalProperties:
                type: string
    restResponseMapPayload:
      title: REST response map payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: object
              additionalProperties:
                type: string
    type:
      title: Type
      type: object
      properties:
        typeName:
          type: string
    view:
      title: View
      type: object
      properties:
        contentType:
          type: string
    wildCardType:
      title: Wild card type
      type: object
      properties:
        lowerBounds:
          type: array
          items:
            $ref: '#/components/schemas/type'
        typeName:
          type: string
        upperBounds:
          type: array
          items:
            $ref: '#/components/schemas/type'
  responses:
    activityStream:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/activityStreamRecord'
    activityStreamRecord:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/activityStreamRecord'
    attributeType_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/attributeType'
    categoriesListMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayloadMapMetadata'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
    category:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/category'
    categoryMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/category'
    componentUsage:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/componentUsage'
    componentUsageEntities:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/componentUsageEntity'
    consumer:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/consumer'
    consumerObject:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumer'
    content:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/content'
    contentMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseMapMetadata'
              - properties:
                  payload:
                    $ref: '#/components/schemas/content'
    contentModel:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/contentModel'
    contentModels:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentModel'
    contentModelReferences:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/contentModelReference'
    contentSetting_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/contentSettings'
    contentTypeObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/contentType'
    contentTypesObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/contentType'
    contents:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsList:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsListMapMetadata:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayloadMapMetadata'
              - properties:
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/content'
    contentsStatus:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contentsStatus'
    iEntityModelDictionary:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    $ref: '#/components/schemas/iEntityModelDictionary'
    modelAndViewObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/modelAndView'
    objectObject_generic:
      description: OK
      content:
        '*/*':
          schema:
            type: object
    ok:
      description: OK
    pagedRestResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pagedRestResponse'
    restResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponse_generic:
      description: OK
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponseMapPayload:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponseMapPayload'
    string_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: string
    strings_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/pagedRestResponse'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    stringsList_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    wildCardType_generic:
      description: OK
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/wildCardType'
    badRequest:
      description: Bad request
    conflict:
      description: Conflict
    contentTypeObject_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/contentType'
    created:
      description: Created
    restResponse-created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/restResponse'
    restResponse_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/restResponse'
    string_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: string
    stringsList_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponseListPayload'
              - properties:
                  payload:
                    type: array
                    items:
                      type: string
    wildCardType_generic-created:
      description: Created
      content:
        '*/*':
          schema:
            allOf:
              - $ref: '#/components/schemas/restResponse'
              - properties:
                  payload:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/wildCardType'
    forbidden:
      description: Forbidden
    noContent:
      description: No content
    notFound:
      description: Not found
    serverError:
      description: Server error
    unauthorized:
      description: Unauthorized
  parameters:
    activityStreamRecordId:
      name: recordId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int32
    activityStreamRecordCommentId:
      name: commentId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int32
    allowedValues:
      name: 'filters[0].allowedValues'
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    attribute:
      name: 'filters[0].attribute'
      in: query
      description: ''
      schema:
        type: string
    attributeTypeId:
      name: attributeTypeId
      in: path
      description: Attribute type code
      required: true
      schema:
        type: string
    categories:
      name: categories
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    categoriesParentCode:
      name: parentCode
      in: query
      description: ''
      schema:
        type: string
        default: home
    categoryId:
      name: categoryId
      in: path
      description: Category code
      required: true
      schema:
        type: string
    categoryReferenceHolder:
      name: categoryReferenceHolder
      in: path
      description: Category references holder
      required: true
      schema:
        type: string
    complete:
      name: complete
      in: query
      description: ''
      schema:
        type: boolean
    consumerId:
      name: consumerId
      in: path
      description: Consumer key
      required: true
      schema:
        type: string
    contentId:
      name: contentId
      in: path
      description: Content code
      required: true
      schema:
        type: string
    contentLang:
      name: lang
      in: query
      description: ''
      schema:
        type: string
    contentModel:
      name: model
      in: query
      description: ''
      schema:
        type: string
    contentModelId:
      name: modelId
      in: path
      description: Content model id
      required: true
      schema:
        type: string
    contentStatus:
      name: status
      in: query
      description: ''
      schema:
        type: string
    contentTypeId:
      name: contentTypeId
      in: path
      description: Content type code
      required: true
      schema:
        type: string
    direction:
      name: direction
      in: query
      description: ''
      schema:
        type: string
    entityAttr:
      name: 'filters[0].entityAttr'
      in: query
      description: ''
      schema:
        type: string
    forLinkingWithExtraGroups:
      name: forLinkingWithExtraGroups
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    forLinkingWithOwnerGroup:
      name: forLinkingWithOwnerGroup
      in: query
      description: ''
      schema:
        type: string
    key:
      name: key
      in: path
      description: ''
      required: true
      schema:
        type: string
    mode:
      name: mode
      in: query
      description: |
        Two value allowed:
          * list: light version
          * full: brings extra data in the content
      schema:
        type: string
        default: full
        enum:
          - list
          - full
    model:
      name: model
      in: query
      description: ''
      schema:
        type: object
    modelId:
      name: modelId
      in: path
      description: ''
      required: true
      schema:
        type: integer
        format: int64
    name:
      name: name
      in: query
      description: ''
      schema:
        type: string
    operator:
      name: 'filters[0].operator'
      in: query
      description: ''
      schema:
        type: string
    orClauseCategoryFilter:
      name: orClauseCategoryFilter
      in: query
      description: ''
      schema:
        type: boolean
    order:
      name: 'filters[0].order'
      in: query
      description: ''
      schema:
        type: string
    page:
      name: page
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    pageSize:
      name: pageSize
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    parameters:
      name: parameters
      in: query
      description: ''
      required: true
      schema: {}
    ratio:
      name: ratio
      in: path
      description: ''
      required: true
      schema:
        type: string
    resolveLink:
      name: resolveLink
      in: query
      description: ''
      schema:
        type: boolean
    resolveLinks:
      name: resolveLinks
      in: query
      description: ''
      schema:
        type: boolean
        default: false
    sort:
      name: sort
      in: query
      description: ''
      schema:
        type: string
    status:
      name: status
      in: query
      description: ''
      schema:
        type: string
        default: draft
    text:
      name: text
      in: query
      description: ''
      schema:
        type: string
    token:
      name: token
      in: query
      description: ''
      required: true
      schema:
        type: string
    type:
      name: 'filters[0].type'
      in: query
      description: ''
      schema:
        type: string
    typeCode:
      name: typeCode
      in: query
      description: ''
      schema:
        type: string
    value:
      name: 'filters[0].value'
      in: query
      description: ''
      schema:
        type: string
  examples: {}
  requestBodies:
    activityStreamRecordComment:
      description: Activity stream record comment
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              comment:
                type: string
              recordId:
                type: integer
                format: int32
    batchContentStatus:
      description: Batch content status
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              codes:
                type: array
                items:
                  type: string
              status:
                type: string
    category:
      description: Category
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/category'
    consumer:
      description: Consumer
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumer'
    content:
      description: Content
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/content'
    contentModel:
      description: Content model
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/contentModel'
    contentSettingsCropRatio:
      description: Content settings crop ratio
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              ratio:
                type: string
    contentSettingsEditor:
      description: Content settings editor
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
                enum:
                  - none
                  - fckeditor
    contentSettingsMetadata:
      description: Content settings metadata
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
              mapping:
                type: string
    contentSettingsMetadataForUpdate:
      description: Content settings metadata for update
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mapping:
                type: string
    contentStatus:
      description: Content status
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    contentType:
      description: Content type
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/contentType'
              - properties:
                  attributes:
                    type: array
                    items:
                      $ref: '#/components/schemas/entityTypeAttributeFull'
    contentsCodes:
      description: Contents codes
      required: true
      content:
        '*/*':
          schema:
            type: array
            items:
              type: string
    contentsList:
      description: Contents list
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/content'
    idCodesByObjectType:
      description: ID codes by object type
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
  headers: {}
  securitySchemes:
    entando:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/realms/entando/protocol/openid-connect/auth
          tokenUrl: /auth/realms/entando/protocol/openid-connect/token
          scopes: {}
  links: {}
  callbacks: {}
security:
  - entando: []
tags:
  - name: activity-stream-controller
    description: Activity stream operations
  - name: analysis-controller
    description: Analysis operations
  - name: analysis-controller-cms
    description: CMS analysis operations
  - name: authorization-endpoint
    description: Authorization operations
  - name: category-controller
    description: Categories operations
  - name: check-token-endpoint
    description: Check token operations
  - name: consumers
    description: Consumers operations
  - name: content-controller
    description: Contents operations
  - name: content-model-controller
    description: Content models operations
  - name: content-settings-controller
    description: Content settings operations
  - name: content-type-resource-controller
    description: Content type resource operations
externalDocs:
  description: ''
  url: 'https://'