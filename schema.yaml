openapi: 3.0.0
info:
  title: Entando Core APIs
  description: Entando Core APIs
  termsOfService: 'https://'
  contact:
    name: Walter Caffiero
    url: 'https://'
    email: w.caffiero@entando.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 7.0.0
servers:
  - url: /entando-de-app/api
    description: Entando 7.0 API base path
paths: {}
components:
  schemas:
    filter:
      title: Filter
      type: object
      properties:
        attribute:
          type: string
        entityAttr:
          type: string
        operator:
          type: string
        order:
          type: string
        type:
          type: string
        value:
          type: string
        allowedValues:
          type: array
          items:
            type: string
    pagedRestResponse:
      title: Paged REST response
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseListPayload'
        - properties:
            metadata:
              $ref: '#/components/schemas/paginationMetadata'
    paginationMetadata:
      title: Pagination metadata
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        lastPage:
          type: integer
          format: int32
        totalItems:
          type: integer
          format: int32
        sort:
          type: string
        direction:
          type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/filter'
        additionalParams:
          type: object
          additionalProperties:
            type: string
    restError:
      title: REST error
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    restResponse:
      title: REST response
      type: object
      properties:
        payload:
          type: object
        metadata:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/restError'
    restResponseListPayload:
      title: REST response list payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: array
              items:
                type: object
    restResponseListPayloadMapMetadata:
      title: REST response list payload map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponseMapMetadata'
        - $ref: '#/components/schemas/restResponseListPayload'
    restResponseMapMetadata:
      title: REST response map metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            metadata:
              type: object
              additionalProperties:
                type: string
    restResponseMapPayload:
      title: REST response map payload
      type: object
      allOf:
        - $ref: '#/components/schemas/restResponse'
        - properties:
            payload:
              type: object
              additionalProperties:
                type: string
  responses: {}
  parameters:
    allowedValues:
      name: 'filters[0].allowedValues'
      in: query
      description: ''
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    attribute:
      name: 'filters[0].attribute'
      in: query
      description: ''
      schema:
        type: string
    direction:
      name: direction
      in: query
      description: ''
      schema:
        type: string
    entityAttr:
      name: 'filters[0].entityAttr'
      in: query
      description: ''
      schema:
        type: string
    operator:
      name: 'filters[0].operator'
      in: query
      description: ''
      schema:
        type: string
    order:
      name: 'filters[0].order'
      in: query
      description: ''
      schema:
        type: string
    page:
      name: page
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    pageSize:
      name: pageSize
      in: query
      description: ''
      schema:
        type: integer
        format: int32
    sort:
      name: sort
      in: query
      description: ''
      schema:
        type: string
    type:
      name: 'filters[0].type'
      in: query
      description: ''
      schema:
        type: string
    value:
      name: 'filters[0].value'
      in: query
      description: ''
      schema:
        type: string
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    entando:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/realms/entando/protocol/openid-connect/auth
          tokenUrl: /auth/realms/entando/protocol/openid-connect/token
          scopes: {}
  links: {}
  callbacks: {}
security:
  - entando: []
tags:
  - name: ''
externalDocs:
  description: ''
  url: 'https://'